// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gimbal.proto

package com.apron.mobilesdk.state;

public final class ProtoGimbal {
  private ProtoGimbal() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface GimbalOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Gimbal)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *云台相对于飞机的姿态，以度数表示。(平台上表示云台角度)
     * </pre>
     *
     * <code>float pitch = 1;</code>
     * @return The pitch.
     */
    float getPitch();

    /**
     * <pre>
     *横滚
     * </pre>
     *
     * <code>float roll = 2;</code>
     * @return The roll.
     */
    float getRoll();

    /**
     * <pre>
     *偏航
     * </pre>
     *
     * <code>float yaw = 3;</code>
     * @return The yaw.
     */
    float getYaw();

    /**
     * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
     * @return The enum numeric value on the wire for gimBalMode.
     */
    int getGimBalModeValue();
    /**
     * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
     * @return The gimBalMode.
     */
    com.apron.mobilesdk.state.ProtoGimbal.Gimbal.GimbalMode getGimBalMode();
  }
  /**
   * Protobuf type {@code Gimbal}
   */
  public  static final class Gimbal extends
      com.google.protobuf.GeneratedMessageLite<
          Gimbal, Gimbal.Builder> implements
      // @@protoc_insertion_point(message_implements:Gimbal)
      GimbalOrBuilder {
    private Gimbal() {
    }
    /**
     * <pre>
     *云台的工作模式
     * </pre>
     *
     * Protobuf enum {@code Gimbal.GimbalMode}
     */
    public enum GimbalMode
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       *云台可以独立于飞机的偏航而移动。在这种模式下，即使飞机偏航角发生变化，相机也会继续指向同一个世界方向。
       * </pre>
       *
       * <code>FREE = 0;</code>
       */
      FREE(0),
      /**
       * <pre>
       *云台工作模式为FPV模式。在该模式下，云台偏航会跟随飞行器的航向，云台滚动会跟随 RC 的滚动通道值。
       * </pre>
       *
       * <code>FPV = 1;</code>
       */
      FPV(1),
      /**
       * <pre>
       *云台的工作模式是跟随偏航。此模式下，云台偏航固定，俯仰和横滚可以移动。
       * </pre>
       *
       * <code>YAW_FOLLOW = 2;</code>
       */
      YAW_FOLLOW(2),
      /**
       * <code>UNKNOWN = 255;</code>
       */
      UNKNOWN(255),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       *云台可以独立于飞机的偏航而移动。在这种模式下，即使飞机偏航角发生变化，相机也会继续指向同一个世界方向。
       * </pre>
       *
       * <code>FREE = 0;</code>
       */
      public static final int FREE_VALUE = 0;
      /**
       * <pre>
       *云台工作模式为FPV模式。在该模式下，云台偏航会跟随飞行器的航向，云台滚动会跟随 RC 的滚动通道值。
       * </pre>
       *
       * <code>FPV = 1;</code>
       */
      public static final int FPV_VALUE = 1;
      /**
       * <pre>
       *云台的工作模式是跟随偏航。此模式下，云台偏航固定，俯仰和横滚可以移动。
       * </pre>
       *
       * <code>YAW_FOLLOW = 2;</code>
       */
      public static final int YAW_FOLLOW_VALUE = 2;
      /**
       * <code>UNKNOWN = 255;</code>
       */
      public static final int UNKNOWN_VALUE = 255;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static GimbalMode valueOf(int value) {
        return forNumber(value);
      }

      public static GimbalMode forNumber(int value) {
        switch (value) {
          case 0: return FREE;
          case 1: return FPV;
          case 2: return YAW_FOLLOW;
          case 255: return UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<GimbalMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          GimbalMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<GimbalMode>() {
              @java.lang.Override
              public GimbalMode findValueByNumber(int number) {
                return GimbalMode.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return GimbalModeVerifier.INSTANCE;
      }

      private static final class GimbalModeVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new GimbalModeVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return GimbalMode.forNumber(number) != null;
              }
            };

      private final int value;

      private GimbalMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Gimbal.GimbalMode)
    }

    public static final int PITCH_FIELD_NUMBER = 1;
    private float pitch_;
    /**
     * <pre>
     *云台相对于飞机的姿态，以度数表示。(平台上表示云台角度)
     * </pre>
     *
     * <code>float pitch = 1;</code>
     * @return The pitch.
     */
    @java.lang.Override
    public float getPitch() {
      return pitch_;
    }
    /**
     * <pre>
     *云台相对于飞机的姿态，以度数表示。(平台上表示云台角度)
     * </pre>
     *
     * <code>float pitch = 1;</code>
     * @param value The pitch to set.
     */
    private void setPitch(float value) {
      
      pitch_ = value;
    }
    /**
     * <pre>
     *云台相对于飞机的姿态，以度数表示。(平台上表示云台角度)
     * </pre>
     *
     * <code>float pitch = 1;</code>
     */
    private void clearPitch() {
      
      pitch_ = 0F;
    }

    public static final int ROLL_FIELD_NUMBER = 2;
    private float roll_;
    /**
     * <pre>
     *横滚
     * </pre>
     *
     * <code>float roll = 2;</code>
     * @return The roll.
     */
    @java.lang.Override
    public float getRoll() {
      return roll_;
    }
    /**
     * <pre>
     *横滚
     * </pre>
     *
     * <code>float roll = 2;</code>
     * @param value The roll to set.
     */
    private void setRoll(float value) {
      
      roll_ = value;
    }
    /**
     * <pre>
     *横滚
     * </pre>
     *
     * <code>float roll = 2;</code>
     */
    private void clearRoll() {
      
      roll_ = 0F;
    }

    public static final int YAW_FIELD_NUMBER = 3;
    private float yaw_;
    /**
     * <pre>
     *偏航
     * </pre>
     *
     * <code>float yaw = 3;</code>
     * @return The yaw.
     */
    @java.lang.Override
    public float getYaw() {
      return yaw_;
    }
    /**
     * <pre>
     *偏航
     * </pre>
     *
     * <code>float yaw = 3;</code>
     * @param value The yaw to set.
     */
    private void setYaw(float value) {
      
      yaw_ = value;
    }
    /**
     * <pre>
     *偏航
     * </pre>
     *
     * <code>float yaw = 3;</code>
     */
    private void clearYaw() {
      
      yaw_ = 0F;
    }

    public static final int GIMBALMODE_FIELD_NUMBER = 15;
    private int gimBalMode_;
    /**
     * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
     * @return The enum numeric value on the wire for gimBalMode.
     */
    @java.lang.Override
    public int getGimBalModeValue() {
      return gimBalMode_;
    }
    /**
     * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
     * @return The gimBalMode.
     */
    @java.lang.Override
    public com.apron.mobilesdk.state.ProtoGimbal.Gimbal.GimbalMode getGimBalMode() {
      com.apron.mobilesdk.state.ProtoGimbal.Gimbal.GimbalMode result = com.apron.mobilesdk.state.ProtoGimbal.Gimbal.GimbalMode.forNumber(gimBalMode_);
      return result == null ? com.apron.mobilesdk.state.ProtoGimbal.Gimbal.GimbalMode.UNRECOGNIZED : result;
    }
    /**
     * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
     * @param value The enum numeric value on the wire for gimBalMode to set.
     */
    private void setGimBalModeValue(int value) {
        gimBalMode_ = value;
    }
    /**
     * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
     * @param value The gimBalMode to set.
     */
    private void setGimBalMode(com.apron.mobilesdk.state.ProtoGimbal.Gimbal.GimbalMode value) {
      gimBalMode_ = value.getNumber();
      
    }
    /**
     * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
     */
    private void clearGimBalMode() {
      
      gimBalMode_ = 0;
    }

    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.apron.mobilesdk.state.ProtoGimbal.Gimbal prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code Gimbal}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.apron.mobilesdk.state.ProtoGimbal.Gimbal, Builder> implements
        // @@protoc_insertion_point(builder_implements:Gimbal)
        com.apron.mobilesdk.state.ProtoGimbal.GimbalOrBuilder {
      // Construct using com.apron.mobilesdk.state.ProtoGimbal.Gimbal.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *云台相对于飞机的姿态，以度数表示。(平台上表示云台角度)
       * </pre>
       *
       * <code>float pitch = 1;</code>
       * @return The pitch.
       */
      @java.lang.Override
      public float getPitch() {
        return instance.getPitch();
      }
      /**
       * <pre>
       *云台相对于飞机的姿态，以度数表示。(平台上表示云台角度)
       * </pre>
       *
       * <code>float pitch = 1;</code>
       * @param value The pitch to set.
       * @return This builder for chaining.
       */
      public Builder setPitch(float value) {
        copyOnWrite();
        instance.setPitch(value);
        return this;
      }
      /**
       * <pre>
       *云台相对于飞机的姿态，以度数表示。(平台上表示云台角度)
       * </pre>
       *
       * <code>float pitch = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPitch() {
        copyOnWrite();
        instance.clearPitch();
        return this;
      }

      /**
       * <pre>
       *横滚
       * </pre>
       *
       * <code>float roll = 2;</code>
       * @return The roll.
       */
      @java.lang.Override
      public float getRoll() {
        return instance.getRoll();
      }
      /**
       * <pre>
       *横滚
       * </pre>
       *
       * <code>float roll = 2;</code>
       * @param value The roll to set.
       * @return This builder for chaining.
       */
      public Builder setRoll(float value) {
        copyOnWrite();
        instance.setRoll(value);
        return this;
      }
      /**
       * <pre>
       *横滚
       * </pre>
       *
       * <code>float roll = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRoll() {
        copyOnWrite();
        instance.clearRoll();
        return this;
      }

      /**
       * <pre>
       *偏航
       * </pre>
       *
       * <code>float yaw = 3;</code>
       * @return The yaw.
       */
      @java.lang.Override
      public float getYaw() {
        return instance.getYaw();
      }
      /**
       * <pre>
       *偏航
       * </pre>
       *
       * <code>float yaw = 3;</code>
       * @param value The yaw to set.
       * @return This builder for chaining.
       */
      public Builder setYaw(float value) {
        copyOnWrite();
        instance.setYaw(value);
        return this;
      }
      /**
       * <pre>
       *偏航
       * </pre>
       *
       * <code>float yaw = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearYaw() {
        copyOnWrite();
        instance.clearYaw();
        return this;
      }

      /**
       * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
       * @return The enum numeric value on the wire for gimBalMode.
       */
      @java.lang.Override
      public int getGimBalModeValue() {
        return instance.getGimBalModeValue();
      }
      /**
       * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
       * @param value The gimBalMode to set.
       * @return This builder for chaining.
       */
      public Builder setGimBalModeValue(int value) {
        copyOnWrite();
        instance.setGimBalModeValue(value);
        return this;
      }
      /**
       * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
       * @return The gimBalMode.
       */
      @java.lang.Override
      public com.apron.mobilesdk.state.ProtoGimbal.Gimbal.GimbalMode getGimBalMode() {
        return instance.getGimBalMode();
      }
      /**
       * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
       * @param value The enum numeric value on the wire for gimBalMode to set.
       * @return This builder for chaining.
       */
      public Builder setGimBalMode(com.apron.mobilesdk.state.ProtoGimbal.Gimbal.GimbalMode value) {
        copyOnWrite();
        instance.setGimBalMode(value);
        return this;
      }
      /**
       * <code>.Gimbal.GimbalMode gimBalMode = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearGimBalMode() {
        copyOnWrite();
        instance.clearGimBalMode();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Gimbal)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.apron.mobilesdk.state.ProtoGimbal.Gimbal();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "pitch_",
              "roll_",
              "yaw_",
              "gimBalMode_",
            };
            java.lang.String info =
                "\u0000\u0004\u0000\u0000\u0001\u000f\u0004\u0000\u0000\u0000\u0001\u0001\u0002\u0001" +
                "\u0003\u0001\u000f\f";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.apron.mobilesdk.state.ProtoGimbal.Gimbal> parser = PARSER;
          if (parser == null) {
            synchronized (com.apron.mobilesdk.state.ProtoGimbal.Gimbal.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.apron.mobilesdk.state.ProtoGimbal.Gimbal>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:Gimbal)
    private static final com.apron.mobilesdk.state.ProtoGimbal.Gimbal DEFAULT_INSTANCE;
    static {
      Gimbal defaultInstance = new Gimbal();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Gimbal.class, defaultInstance);
    }

    public static com.apron.mobilesdk.state.ProtoGimbal.Gimbal getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Gimbal> PARSER;

    public static com.google.protobuf.Parser<Gimbal> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
