// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlightController.proto

package com.apron.mobilesdk.state;

public final class ProtoFlightController {
  private ProtoFlightController() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface FlightControllerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:FlightController)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *电机是否启动
     * </pre>
     *
     * <code>bool areMotorsOn = 1;</code>
     * @return The areMotorsOn.
     */
    boolean getAreMotorsOn();

    /**
     * <pre>
     *是否处于飞行状态
     * </pre>
     *
     * <code>bool isFlying = 2;</code>
     * @return The isFlying.
     */
    boolean getIsFlying();

    /**
     * <pre>
     *飞行器当前经纬度(WGS84精准坐标系,平台可以转换为GCJ02坐标系使用)
     * </pre>
     *
     * <code>double latitude = 3;</code>
     * @return The latitude.
     */
    double getLatitude();

    /**
     * <code>double longitude = 4;</code>
     * @return The longitude.
     */
    double getLongitude();

    /**
     * <pre>
     *飞行器当前高度
     * </pre>
     *
     * <code>float altitude = 5;</code>
     * @return The altitude.
     */
    float getAltitude();

    /**
     * <pre>
     *飞机原地位置相对于海平面的相对高度，以米为单位。
     * </pre>
     *
     * <code>float takeoffLocationAltitude = 6;</code>
     * @return The takeoffLocationAltitude.
     */
    float getTakeoffLocationAltitude();

    /**
     * <pre>
     *俯仰、横滚和偏航值将在 [-180, 180] 度范围内的飞机姿态。
     * </pre>
     *
     * <code>double pitch = 7;</code>
     * @return The pitch.
     */
    double getPitch();

    /**
     * <code>double roll = 8;</code>
     * @return The roll.
     */
    double getRoll();

    /**
     * <code>double yaw = 9;</code>
     * @return The yaw.
     */
    double getYaw();

    /**
     * <pre>
     *飞机在 x，y，z，方向上的当前速度，以米/秒为单位，使用 NED（North-East-Down）坐标系。
     *平台取(velocityX²+velocityY²)开根值作为水平速度
     * </pre>
     *
     * <code>float velocityX = 10;</code>
     * @return The velocityX.
     */
    float getVelocityX();

    /**
     * <code>float velocityY = 11;</code>
     * @return The velocityY.
     */
    float getVelocityY();

    /**
     * <pre>
     *平台取此值做为垂直速度
     * </pre>
     *
     * <code>float velocityZ = 12;</code>
     * @return The velocityZ.
     */
    float getVelocityZ();

    /**
     * <pre>
     *自飞机发动机开启以来的累计飞行时间（以秒为单位）。
     * </pre>
     *
     * <code>int32 flightTimeInSeconds = 13;</code>
     * @return The flightTimeInSeconds.
     */
    int getFlightTimeInSeconds();

    /**
     * <pre>
     *返回 GPS 卫星计数。
     * </pre>
     *
     * <code>int32 satelliteCount = 14;</code>
     * @return The satelliteCount.
     */
    int getSatelliteCount();

    /**
     * <pre>
     *由超声波传感器测量的飞机高度，以米为单位。数据仅在isUltrasonicBeingUsed返回时可用true。高度精度为0.1m。该值在高度低于 5 米时具有参考意义。
     * </pre>
     *
     * <code>float ultrasonicHeightInMeters = 16;</code>
     * @return The ultrasonicHeightInMeters.
     */
    float getUltrasonicHeightInMeters();

    /**
     * <pre>
     *电池生命周期内的飞行次数。上电时清零。
     * </pre>
     *
     * <code>int32 flightCount = 20;</code>
     * @return The flightCount.
     */
    int getFlightCount();

    /**
     * <pre>
     *返航点经纬度
     * </pre>
     *
     * <code>double homeLocationLatitude = 21;</code>
     * @return The homeLocationLatitude.
     */
    double getHomeLocationLatitude();

    /**
     * <code>double homeLocationLongitude = 22;</code>
     * @return The homeLocationLongitude.
     */
    double getHomeLocationLongitude();

    /**
     * <pre>
     *返航高度
     * </pre>
     *
     * <code>int32 goHomeHeight = 23;</code>
     * @return The goHomeHeight.
     */
    int getGoHomeHeight();

    /**
     * <pre>
     *飞行器控制模式
     * </pre>
     *
     * <code>string flightModeString = 24;</code>
     * @return The flightModeString.
     */
    java.lang.String getFlightModeString();
    /**
     * <pre>
     *飞行器控制模式
     * </pre>
     *
     * <code>string flightModeString = 24;</code>
     * @return The bytes for flightModeString.
     */
    com.google.protobuf.ByteString
        getFlightModeStringBytes();

    /**
     * <pre>
     *风速(分米)
     * </pre>
     *
     * <code>int32 windSpeed = 26;</code>
     * @return The windSpeed.
     */
    int getWindSpeed();

    /**
     * <pre>
     *返航距离
     * </pre>
     *
     * <code>double goHomeLength = 27;</code>
     * @return The goHomeLength.
     */
    double getGoHomeLength();

    /**
     * <pre>
     *表示航向，以度为单位。正北为 0 度，正航向为北东，负航向为北西。范围为 [-180, 180]。
     * </pre>
     *
     * <code>float compassHeading = 28;</code>
     * @return The compassHeading.
     */
    float getCompassHeading();

    /**
     * <pre>
     *IMU 正在预热
     * </pre>
     *
     * <code>bool isIMUPreheating = 29;</code>
     * @return The isIMUPreheating.
     */
    boolean getIsIMUPreheating();

    /**
     * <pre>
     *正在使用超声波传感器
     * </pre>
     *
     * <code>bool isUltrasonicBeingUsed = 30;</code>
     * @return The isUltrasonicBeingUsed.
     */
    boolean getIsUltrasonicBeingUsed();

    /**
     * <pre>
     *正在使用视觉传感器
     * </pre>
     *
     * <code>bool isVisionPositioningSensorBeingUsed = 31;</code>
     * @return The isVisionPositioningSensorBeingUsed.
     */
    boolean getIsVisionPositioningSensorBeingUsed();

    /**
     * <pre>
     *电池电量低于低电量警告阈值
     * </pre>
     *
     * <code>bool isLowerThanBatteryWarningThreshold = 32;</code>
     * @return The isLowerThanBatteryWarningThreshold.
     */
    boolean getIsLowerThanBatteryWarningThreshold();

    /**
     * <pre>
     *电池电量低于严重低电量警告阈值。
     * </pre>
     *
     * <code>bool isLowerThanSeriousBatteryWarningThreshold = 33;</code>
     * @return The isLowerThanSeriousBatteryWarningThreshold.
     */
    boolean getIsLowerThanSeriousBatteryWarningThreshold();

    /**
     * <pre>
     *飞机系统诊断状态(平台可作为飞机状态展示)
     * </pre>
     *
     * <code>string systemStatus = 34;</code>
     * @return The systemStatus.
     */
    java.lang.String getSystemStatus();
    /**
     * <pre>
     *飞机系统诊断状态(平台可作为飞机状态展示)
     * </pre>
     *
     * <code>string systemStatus = 34;</code>
     * @return The bytes for systemStatus.
     */
    com.google.protobuf.ByteString
        getSystemStatusBytes();

    /**
     * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
     * @return The enum numeric value on the wire for gPSsignalLevel.
     */
    int getGPSsignalLevelValue();
    /**
     * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
     * @return The gPSsignalLevel.
     */
    com.apron.mobilesdk.state.ProtoFlightController.FlightController.GPSSignalLevel getGPSsignalLevel();

    /**
     * <code>.FlightController.OrientationMode orientationMode = 17;</code>
     * @return The enum numeric value on the wire for orientationMode.
     */
    int getOrientationModeValue();
    /**
     * <code>.FlightController.OrientationMode orientationMode = 17;</code>
     * @return The orientationMode.
     */
    com.apron.mobilesdk.state.ProtoFlightController.FlightController.OrientationMode getOrientationMode();

    /**
     * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
     * @return The enum numeric value on the wire for flightWindWarning.
     */
    int getFlightWindWarningValue();
    /**
     * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
     * @return The flightWindWarning.
     */
    com.apron.mobilesdk.state.ProtoFlightController.FlightController.FlightWindWarning getFlightWindWarning();

    /**
     * <code>.FlightController.WindDirection windDirection = 25;</code>
     * @return The enum numeric value on the wire for windDirection.
     */
    int getWindDirectionValue();
    /**
     * <code>.FlightController.WindDirection windDirection = 25;</code>
     * @return The windDirection.
     */
    com.apron.mobilesdk.state.ProtoFlightController.FlightController.WindDirection getWindDirection();

    /**
     * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
     * @return The enum numeric value on the wire for batteryThresholdBehavior.
     */
    int getBatteryThresholdBehaviorValue();
    /**
     * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
     * @return The batteryThresholdBehavior.
     */
    com.apron.mobilesdk.state.ProtoFlightController.FlightController.BatteryThresholdBehavior getBatteryThresholdBehavior();

    /**
     * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
     * @return The enum numeric value on the wire for goHomeExecutionState.
     */
    int getGoHomeExecutionStateValue();
    /**
     * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
     * @return The goHomeExecutionState.
     */
    com.apron.mobilesdk.state.ProtoFlightController.FlightController.GoHomeExecutionState getGoHomeExecutionState();
  }
  /**
   * Protobuf type {@code FlightController}
   */
  public  static final class FlightController extends
      com.google.protobuf.GeneratedMessageLite<
          FlightController, FlightController.Builder> implements
      // @@protoc_insertion_point(message_implements:FlightController)
      FlightControllerOrBuilder {
    private FlightController() {
      flightModeString_ = "";
      systemStatus_ = "";
    }
    /**
     * <pre>
     *用于测量信号质量
     * </pre>
     *
     * Protobuf enum {@code FlightController.GPSSignalLevel}
     */
    public enum GPSSignalLevel
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>LEVEL_0 = 0;</code>
       */
      LEVEL_0(0),
      /**
       * <code>LEVEL_1 = 1;</code>
       */
      LEVEL_1(1),
      /**
       * <code>LEVEL_2 = 2;</code>
       */
      LEVEL_2(2),
      /**
       * <code>LEVEL_3 = 3;</code>
       */
      LEVEL_3(3),
      /**
       * <code>LEVEL_4 = 4;</code>
       */
      LEVEL_4(4),
      /**
       * <code>LEVEL_5 = 5;</code>
       */
      LEVEL_5(5),
      /**
       * <code>LEVEL_6 = 6;</code>
       */
      LEVEL_6(6),
      /**
       * <code>LEVEL_7 = 7;</code>
       */
      LEVEL_7(7),
      /**
       * <code>LEVEL_8 = 8;</code>
       */
      LEVEL_8(8),
      /**
       * <code>LEVEL_9 = 9;</code>
       */
      LEVEL_9(9),
      /**
       * <code>LEVEL_10 = 10;</code>
       */
      LEVEL_10(10),
      /**
       * <code>NONE = 255;</code>
       */
      NONE(255),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>LEVEL_0 = 0;</code>
       */
      public static final int LEVEL_0_VALUE = 0;
      /**
       * <code>LEVEL_1 = 1;</code>
       */
      public static final int LEVEL_1_VALUE = 1;
      /**
       * <code>LEVEL_2 = 2;</code>
       */
      public static final int LEVEL_2_VALUE = 2;
      /**
       * <code>LEVEL_3 = 3;</code>
       */
      public static final int LEVEL_3_VALUE = 3;
      /**
       * <code>LEVEL_4 = 4;</code>
       */
      public static final int LEVEL_4_VALUE = 4;
      /**
       * <code>LEVEL_5 = 5;</code>
       */
      public static final int LEVEL_5_VALUE = 5;
      /**
       * <code>LEVEL_6 = 6;</code>
       */
      public static final int LEVEL_6_VALUE = 6;
      /**
       * <code>LEVEL_7 = 7;</code>
       */
      public static final int LEVEL_7_VALUE = 7;
      /**
       * <code>LEVEL_8 = 8;</code>
       */
      public static final int LEVEL_8_VALUE = 8;
      /**
       * <code>LEVEL_9 = 9;</code>
       */
      public static final int LEVEL_9_VALUE = 9;
      /**
       * <code>LEVEL_10 = 10;</code>
       */
      public static final int LEVEL_10_VALUE = 10;
      /**
       * <code>NONE = 255;</code>
       */
      public static final int NONE_VALUE = 255;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static GPSSignalLevel valueOf(int value) {
        return forNumber(value);
      }

      public static GPSSignalLevel forNumber(int value) {
        switch (value) {
          case 0: return LEVEL_0;
          case 1: return LEVEL_1;
          case 2: return LEVEL_2;
          case 3: return LEVEL_3;
          case 4: return LEVEL_4;
          case 5: return LEVEL_5;
          case 6: return LEVEL_6;
          case 7: return LEVEL_7;
          case 8: return LEVEL_8;
          case 9: return LEVEL_9;
          case 10: return LEVEL_10;
          case 255: return NONE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<GPSSignalLevel>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          GPSSignalLevel> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<GPSSignalLevel>() {
              @java.lang.Override
              public GPSSignalLevel findValueByNumber(int number) {
                return GPSSignalLevel.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return GPSSignalLevelVerifier.INSTANCE;
      }

      private static final class GPSSignalLevelVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new GPSSignalLevelVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return GPSSignalLevel.forNumber(number) != null;
              }
            };

      private final int value;

      private GPSSignalLevel(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:FlightController.GPSSignalLevel)
    }

    /**
     * <pre>
     *飞行器当前的定向模式。(待测试)
     * </pre>
     *
     * Protobuf enum {@code FlightController.OrientationMode}
     */
    public enum OrientationMode
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>UNKNOWN_MODE = 0;</code>
       */
      UNKNOWN_MODE(0),
      /**
       * <code>AIRCRAFT_HEADING = 255;</code>
       */
      AIRCRAFT_HEADING(255),
      /**
       * <code>COURSE_LOCK = 1;</code>
       */
      COURSE_LOCK(1),
      /**
       * <code>HOME_LOCK = 2;</code>
       */
      HOME_LOCK(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>UNKNOWN_MODE = 0;</code>
       */
      public static final int UNKNOWN_MODE_VALUE = 0;
      /**
       * <code>AIRCRAFT_HEADING = 255;</code>
       */
      public static final int AIRCRAFT_HEADING_VALUE = 255;
      /**
       * <code>COURSE_LOCK = 1;</code>
       */
      public static final int COURSE_LOCK_VALUE = 1;
      /**
       * <code>HOME_LOCK = 2;</code>
       */
      public static final int HOME_LOCK_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OrientationMode valueOf(int value) {
        return forNumber(value);
      }

      public static OrientationMode forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN_MODE;
          case 255: return AIRCRAFT_HEADING;
          case 1: return COURSE_LOCK;
          case 2: return HOME_LOCK;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OrientationMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          OrientationMode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OrientationMode>() {
              @java.lang.Override
              public OrientationMode findValueByNumber(int number) {
                return OrientationMode.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return OrientationModeVerifier.INSTANCE;
      }

      private static final class OrientationModeVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new OrientationModeVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return OrientationMode.forNumber(number) != null;
              }
            };

      private final int value;

      private OrientationMode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:FlightController.OrientationMode)
    }

    /**
     * <pre>
     *强风引起的警告。
     * </pre>
     *
     * Protobuf enum {@code FlightController.FlightWindWarning}
     */
    public enum FlightWindWarning
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       *无风
       * </pre>
       *
       * <code>WIND_LEVEL_0 = 0;</code>
       */
      WIND_LEVEL_0(0),
      /**
       * <pre>
       *风速大
       * </pre>
       *
       * <code>WIND_LEVEL_1 = 1;</code>
       */
      WIND_LEVEL_1(1),
      /**
       * <pre>
       *风速极大
       * </pre>
       *
       * <code>WIND_LEVEL_2 = 2;</code>
       */
      WIND_LEVEL_2(2),
      /**
       * <pre>
       *未知
       * </pre>
       *
       * <code>WIND_UNKNOWN = 3;</code>
       */
      WIND_UNKNOWN(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       *无风
       * </pre>
       *
       * <code>WIND_LEVEL_0 = 0;</code>
       */
      public static final int WIND_LEVEL_0_VALUE = 0;
      /**
       * <pre>
       *风速大
       * </pre>
       *
       * <code>WIND_LEVEL_1 = 1;</code>
       */
      public static final int WIND_LEVEL_1_VALUE = 1;
      /**
       * <pre>
       *风速极大
       * </pre>
       *
       * <code>WIND_LEVEL_2 = 2;</code>
       */
      public static final int WIND_LEVEL_2_VALUE = 2;
      /**
       * <pre>
       *未知
       * </pre>
       *
       * <code>WIND_UNKNOWN = 3;</code>
       */
      public static final int WIND_UNKNOWN_VALUE = 3;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FlightWindWarning valueOf(int value) {
        return forNumber(value);
      }

      public static FlightWindWarning forNumber(int value) {
        switch (value) {
          case 0: return WIND_LEVEL_0;
          case 1: return WIND_LEVEL_1;
          case 2: return WIND_LEVEL_2;
          case 3: return WIND_UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FlightWindWarning>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FlightWindWarning> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FlightWindWarning>() {
              @java.lang.Override
              public FlightWindWarning findValueByNumber(int number) {
                return FlightWindWarning.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return FlightWindWarningVerifier.INSTANCE;
      }

      private static final class FlightWindWarningVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new FlightWindWarningVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return FlightWindWarning.forNumber(number) != null;
              }
            };

      private final int value;

      private FlightWindWarning(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:FlightController.FlightWindWarning)
    }

    /**
     * <pre>
     *风向
     * </pre>
     *
     * Protobuf enum {@code FlightController.WindDirection}
     */
    public enum WindDirection
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       *无风
       * </pre>
       *
       * <code>WINDLESS = 0;</code>
       */
      WINDLESS(0),
      /**
       * <pre>
       *北风
       * </pre>
       *
       * <code>NORTH = 1;</code>
       */
      NORTH(1),
      /**
       * <pre>
       *东北风
       * </pre>
       *
       * <code>NORTH_EAST = 2;</code>
       */
      NORTH_EAST(2),
      /**
       * <pre>
       *东风
       * </pre>
       *
       * <code>EAST = 3;</code>
       */
      EAST(3),
      /**
       * <pre>
       *东南风
       * </pre>
       *
       * <code>SOUTH_EAST = 4;</code>
       */
      SOUTH_EAST(4),
      /**
       * <pre>
       *南风
       * </pre>
       *
       * <code>SOUTH = 5;</code>
       */
      SOUTH(5),
      /**
       * <pre>
       *西南风
       * </pre>
       *
       * <code>SOUTH_WEST = 6;</code>
       */
      SOUTH_WEST(6),
      /**
       * <pre>
       *西风
       * </pre>
       *
       * <code>WEST = 7;</code>
       */
      WEST(7),
      /**
       * <pre>
       *西北风
       * </pre>
       *
       * <code>NORTH_WEST = 8;</code>
       */
      NORTH_WEST(8),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       *无风
       * </pre>
       *
       * <code>WINDLESS = 0;</code>
       */
      public static final int WINDLESS_VALUE = 0;
      /**
       * <pre>
       *北风
       * </pre>
       *
       * <code>NORTH = 1;</code>
       */
      public static final int NORTH_VALUE = 1;
      /**
       * <pre>
       *东北风
       * </pre>
       *
       * <code>NORTH_EAST = 2;</code>
       */
      public static final int NORTH_EAST_VALUE = 2;
      /**
       * <pre>
       *东风
       * </pre>
       *
       * <code>EAST = 3;</code>
       */
      public static final int EAST_VALUE = 3;
      /**
       * <pre>
       *东南风
       * </pre>
       *
       * <code>SOUTH_EAST = 4;</code>
       */
      public static final int SOUTH_EAST_VALUE = 4;
      /**
       * <pre>
       *南风
       * </pre>
       *
       * <code>SOUTH = 5;</code>
       */
      public static final int SOUTH_VALUE = 5;
      /**
       * <pre>
       *西南风
       * </pre>
       *
       * <code>SOUTH_WEST = 6;</code>
       */
      public static final int SOUTH_WEST_VALUE = 6;
      /**
       * <pre>
       *西风
       * </pre>
       *
       * <code>WEST = 7;</code>
       */
      public static final int WEST_VALUE = 7;
      /**
       * <pre>
       *西北风
       * </pre>
       *
       * <code>NORTH_WEST = 8;</code>
       */
      public static final int NORTH_WEST_VALUE = 8;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static WindDirection valueOf(int value) {
        return forNumber(value);
      }

      public static WindDirection forNumber(int value) {
        switch (value) {
          case 0: return WINDLESS;
          case 1: return NORTH;
          case 2: return NORTH_EAST;
          case 3: return EAST;
          case 4: return SOUTH_EAST;
          case 5: return SOUTH;
          case 6: return SOUTH_WEST;
          case 7: return WEST;
          case 8: return NORTH_WEST;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<WindDirection>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          WindDirection> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<WindDirection>() {
              @java.lang.Override
              public WindDirection findValueByNumber(int number) {
                return WindDirection.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return WindDirectionVerifier.INSTANCE;
      }

      private static final class WindDirectionVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new WindDirectionVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return WindDirection.forNumber(number) != null;
              }
            };

      private final int value;

      private WindDirection(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:FlightController.WindDirection)
    }

    /**
     * <pre>
     *剩余电池寿命状态。此状态描述基于剩余电池寿命的推荐操作。
     * </pre>
     *
     * Protobuf enum {@code FlightController.BatteryThresholdBehavior}
     */
    public enum BatteryThresholdBehavior
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       *剩余电池寿命足以正常飞行。
       * </pre>
       *
       * <code>FLY_NORMALLY = 0;</code>
       */
      FLY_NORMALLY(0),
      /**
       * <pre>
       *剩余电池寿命足以正常返航。
       * </pre>
       *
       * <code>GO_HOME = 1;</code>
       */
      GO_HOME(1),
      /**
       * <pre>
       *剩余电池寿命足以立即降落。
       * </pre>
       *
       * <code>LAND_IMMEDIATELY = 2;</code>
       */
      LAND_IMMEDIATELY(2),
      /**
       * <pre>
       *未知
       * </pre>
       *
       * <code>UNKNOWN = 255;</code>
       */
      UNKNOWN(255),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       *剩余电池寿命足以正常飞行。
       * </pre>
       *
       * <code>FLY_NORMALLY = 0;</code>
       */
      public static final int FLY_NORMALLY_VALUE = 0;
      /**
       * <pre>
       *剩余电池寿命足以正常返航。
       * </pre>
       *
       * <code>GO_HOME = 1;</code>
       */
      public static final int GO_HOME_VALUE = 1;
      /**
       * <pre>
       *剩余电池寿命足以立即降落。
       * </pre>
       *
       * <code>LAND_IMMEDIATELY = 2;</code>
       */
      public static final int LAND_IMMEDIATELY_VALUE = 2;
      /**
       * <pre>
       *未知
       * </pre>
       *
       * <code>UNKNOWN = 255;</code>
       */
      public static final int UNKNOWN_VALUE = 255;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static BatteryThresholdBehavior valueOf(int value) {
        return forNumber(value);
      }

      public static BatteryThresholdBehavior forNumber(int value) {
        switch (value) {
          case 0: return FLY_NORMALLY;
          case 1: return GO_HOME;
          case 2: return LAND_IMMEDIATELY;
          case 255: return UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<BatteryThresholdBehavior>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          BatteryThresholdBehavior> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<BatteryThresholdBehavior>() {
              @java.lang.Override
              public BatteryThresholdBehavior findValueByNumber(int number) {
                return BatteryThresholdBehavior.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return BatteryThresholdBehaviorVerifier.INSTANCE;
      }

      private static final class BatteryThresholdBehaviorVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new BatteryThresholdBehaviorVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return BatteryThresholdBehavior.forNumber(number) != null;
              }
            };

      private final int value;

      private BatteryThresholdBehavior(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:FlightController.BatteryThresholdBehavior)
    }

    /**
     * <pre>
     *用于标识 go-home 命令的不同阶段的枚举。部分飞行器根据固件仅支持部分状态。
     *例如：
     *Phantom 4 Pro V2.0 和 Mavic 2 Enterprise Dual 仅支持GO_DOWN_TO_GROUND。
     *Matrice 300 RTK 仅支持GO_UP_TO_HEIGHT,AUTO_FLY_TO_HOME_POINT和GO_DOWN_TO_GROUND.
     * </pre>
     *
     * Protobuf enum {@code FlightController.GoHomeExecutionState}
     */
    public enum GoHomeExecutionState
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       *飞机没有执行返航指令。
       * </pre>
       *
       * <code>NOT_EXECUTING = 0;</code>
       */
      NOT_EXECUTING(0),
      /**
       * <pre>
       *飞机正在将航向方向转向返航点。
       * </pre>
       *
       * <code>TURN_DIRECTION_TO_HOME_POINT = 2;</code>
       */
      TURN_DIRECTION_TO_HOME_POINT(2),
      /**
       * <pre>
       *飞机正在上升到返航指令的高度。
       * </pre>
       *
       * <code>GO_UP_TO_HEIGHT = 1;</code>
       */
      GO_UP_TO_HEIGHT(1),
      /**
       * <pre>
       *	飞机水平飞行到返航点。
       * </pre>
       *
       * <code>AUTO_FLY_TO_HOME_POINT = 4;</code>
       */
      AUTO_FLY_TO_HOME_POINT(4),
      /**
       * <pre>
       *	飞机到达返航点后正在下降。
       * </pre>
       *
       * <code>GO_DOWN_TO_GROUND = 7;</code>
       */
      GO_DOWN_TO_GROUND(7),
      /**
       * <pre>
       *go-home 命令完成。
       * </pre>
       *
       * <code>COMPLETED = 8;</code>
       */
      COMPLETED(8),
      /**
       * <pre>
       *飞机正在刹车以避免碰撞。
       * </pre>
       *
       * <code>BRAKING = 5;</code>
       */
      BRAKING(5),
      /**
       * <pre>
       *飞机正在绕过障碍物。
       * </pre>
       *
       * <code>BYPASSING = 6;</code>
       */
      BYPASSING(6),
      /**
       * <pre>
       *回家状态未知。
       * </pre>
       *
       * <code>UNKNOWN_STATE = 255;</code>
       */
      UNKNOWN_STATE(255),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       *飞机没有执行返航指令。
       * </pre>
       *
       * <code>NOT_EXECUTING = 0;</code>
       */
      public static final int NOT_EXECUTING_VALUE = 0;
      /**
       * <pre>
       *飞机正在将航向方向转向返航点。
       * </pre>
       *
       * <code>TURN_DIRECTION_TO_HOME_POINT = 2;</code>
       */
      public static final int TURN_DIRECTION_TO_HOME_POINT_VALUE = 2;
      /**
       * <pre>
       *飞机正在上升到返航指令的高度。
       * </pre>
       *
       * <code>GO_UP_TO_HEIGHT = 1;</code>
       */
      public static final int GO_UP_TO_HEIGHT_VALUE = 1;
      /**
       * <pre>
       *	飞机水平飞行到返航点。
       * </pre>
       *
       * <code>AUTO_FLY_TO_HOME_POINT = 4;</code>
       */
      public static final int AUTO_FLY_TO_HOME_POINT_VALUE = 4;
      /**
       * <pre>
       *	飞机到达返航点后正在下降。
       * </pre>
       *
       * <code>GO_DOWN_TO_GROUND = 7;</code>
       */
      public static final int GO_DOWN_TO_GROUND_VALUE = 7;
      /**
       * <pre>
       *go-home 命令完成。
       * </pre>
       *
       * <code>COMPLETED = 8;</code>
       */
      public static final int COMPLETED_VALUE = 8;
      /**
       * <pre>
       *飞机正在刹车以避免碰撞。
       * </pre>
       *
       * <code>BRAKING = 5;</code>
       */
      public static final int BRAKING_VALUE = 5;
      /**
       * <pre>
       *飞机正在绕过障碍物。
       * </pre>
       *
       * <code>BYPASSING = 6;</code>
       */
      public static final int BYPASSING_VALUE = 6;
      /**
       * <pre>
       *回家状态未知。
       * </pre>
       *
       * <code>UNKNOWN_STATE = 255;</code>
       */
      public static final int UNKNOWN_STATE_VALUE = 255;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static GoHomeExecutionState valueOf(int value) {
        return forNumber(value);
      }

      public static GoHomeExecutionState forNumber(int value) {
        switch (value) {
          case 0: return NOT_EXECUTING;
          case 2: return TURN_DIRECTION_TO_HOME_POINT;
          case 1: return GO_UP_TO_HEIGHT;
          case 4: return AUTO_FLY_TO_HOME_POINT;
          case 7: return GO_DOWN_TO_GROUND;
          case 8: return COMPLETED;
          case 5: return BRAKING;
          case 6: return BYPASSING;
          case 255: return UNKNOWN_STATE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<GoHomeExecutionState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          GoHomeExecutionState> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<GoHomeExecutionState>() {
              @java.lang.Override
              public GoHomeExecutionState findValueByNumber(int number) {
                return GoHomeExecutionState.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return GoHomeExecutionStateVerifier.INSTANCE;
      }

      private static final class GoHomeExecutionStateVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new GoHomeExecutionStateVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return GoHomeExecutionState.forNumber(number) != null;
              }
            };

      private final int value;

      private GoHomeExecutionState(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:FlightController.GoHomeExecutionState)
    }

    public static final int AREMOTORSON_FIELD_NUMBER = 1;
    private boolean areMotorsOn_;
    /**
     * <pre>
     *电机是否启动
     * </pre>
     *
     * <code>bool areMotorsOn = 1;</code>
     * @return The areMotorsOn.
     */
    @java.lang.Override
    public boolean getAreMotorsOn() {
      return areMotorsOn_;
    }
    /**
     * <pre>
     *电机是否启动
     * </pre>
     *
     * <code>bool areMotorsOn = 1;</code>
     * @param value The areMotorsOn to set.
     */
    private void setAreMotorsOn(boolean value) {
      
      areMotorsOn_ = value;
    }
    /**
     * <pre>
     *电机是否启动
     * </pre>
     *
     * <code>bool areMotorsOn = 1;</code>
     */
    private void clearAreMotorsOn() {
      
      areMotorsOn_ = false;
    }

    public static final int ISFLYING_FIELD_NUMBER = 2;
    private boolean isFlying_;
    /**
     * <pre>
     *是否处于飞行状态
     * </pre>
     *
     * <code>bool isFlying = 2;</code>
     * @return The isFlying.
     */
    @java.lang.Override
    public boolean getIsFlying() {
      return isFlying_;
    }
    /**
     * <pre>
     *是否处于飞行状态
     * </pre>
     *
     * <code>bool isFlying = 2;</code>
     * @param value The isFlying to set.
     */
    private void setIsFlying(boolean value) {
      
      isFlying_ = value;
    }
    /**
     * <pre>
     *是否处于飞行状态
     * </pre>
     *
     * <code>bool isFlying = 2;</code>
     */
    private void clearIsFlying() {
      
      isFlying_ = false;
    }

    public static final int LATITUDE_FIELD_NUMBER = 3;
    private double latitude_;
    /**
     * <pre>
     *飞行器当前经纬度(WGS84精准坐标系,平台可以转换为GCJ02坐标系使用)
     * </pre>
     *
     * <code>double latitude = 3;</code>
     * @return The latitude.
     */
    @java.lang.Override
    public double getLatitude() {
      return latitude_;
    }
    /**
     * <pre>
     *飞行器当前经纬度(WGS84精准坐标系,平台可以转换为GCJ02坐标系使用)
     * </pre>
     *
     * <code>double latitude = 3;</code>
     * @param value The latitude to set.
     */
    private void setLatitude(double value) {
      
      latitude_ = value;
    }
    /**
     * <pre>
     *飞行器当前经纬度(WGS84精准坐标系,平台可以转换为GCJ02坐标系使用)
     * </pre>
     *
     * <code>double latitude = 3;</code>
     */
    private void clearLatitude() {
      
      latitude_ = 0D;
    }

    public static final int LONGITUDE_FIELD_NUMBER = 4;
    private double longitude_;
    /**
     * <code>double longitude = 4;</code>
     * @return The longitude.
     */
    @java.lang.Override
    public double getLongitude() {
      return longitude_;
    }
    /**
     * <code>double longitude = 4;</code>
     * @param value The longitude to set.
     */
    private void setLongitude(double value) {
      
      longitude_ = value;
    }
    /**
     * <code>double longitude = 4;</code>
     */
    private void clearLongitude() {
      
      longitude_ = 0D;
    }

    public static final int ALTITUDE_FIELD_NUMBER = 5;
    private float altitude_;
    /**
     * <pre>
     *飞行器当前高度
     * </pre>
     *
     * <code>float altitude = 5;</code>
     * @return The altitude.
     */
    @java.lang.Override
    public float getAltitude() {
      return altitude_;
    }
    /**
     * <pre>
     *飞行器当前高度
     * </pre>
     *
     * <code>float altitude = 5;</code>
     * @param value The altitude to set.
     */
    private void setAltitude(float value) {
      
      altitude_ = value;
    }
    /**
     * <pre>
     *飞行器当前高度
     * </pre>
     *
     * <code>float altitude = 5;</code>
     */
    private void clearAltitude() {
      
      altitude_ = 0F;
    }

    public static final int TAKEOFFLOCATIONALTITUDE_FIELD_NUMBER = 6;
    private float takeoffLocationAltitude_;
    /**
     * <pre>
     *飞机原地位置相对于海平面的相对高度，以米为单位。
     * </pre>
     *
     * <code>float takeoffLocationAltitude = 6;</code>
     * @return The takeoffLocationAltitude.
     */
    @java.lang.Override
    public float getTakeoffLocationAltitude() {
      return takeoffLocationAltitude_;
    }
    /**
     * <pre>
     *飞机原地位置相对于海平面的相对高度，以米为单位。
     * </pre>
     *
     * <code>float takeoffLocationAltitude = 6;</code>
     * @param value The takeoffLocationAltitude to set.
     */
    private void setTakeoffLocationAltitude(float value) {
      
      takeoffLocationAltitude_ = value;
    }
    /**
     * <pre>
     *飞机原地位置相对于海平面的相对高度，以米为单位。
     * </pre>
     *
     * <code>float takeoffLocationAltitude = 6;</code>
     */
    private void clearTakeoffLocationAltitude() {
      
      takeoffLocationAltitude_ = 0F;
    }

    public static final int PITCH_FIELD_NUMBER = 7;
    private double pitch_;
    /**
     * <pre>
     *俯仰、横滚和偏航值将在 [-180, 180] 度范围内的飞机姿态。
     * </pre>
     *
     * <code>double pitch = 7;</code>
     * @return The pitch.
     */
    @java.lang.Override
    public double getPitch() {
      return pitch_;
    }
    /**
     * <pre>
     *俯仰、横滚和偏航值将在 [-180, 180] 度范围内的飞机姿态。
     * </pre>
     *
     * <code>double pitch = 7;</code>
     * @param value The pitch to set.
     */
    private void setPitch(double value) {
      
      pitch_ = value;
    }
    /**
     * <pre>
     *俯仰、横滚和偏航值将在 [-180, 180] 度范围内的飞机姿态。
     * </pre>
     *
     * <code>double pitch = 7;</code>
     */
    private void clearPitch() {
      
      pitch_ = 0D;
    }

    public static final int ROLL_FIELD_NUMBER = 8;
    private double roll_;
    /**
     * <code>double roll = 8;</code>
     * @return The roll.
     */
    @java.lang.Override
    public double getRoll() {
      return roll_;
    }
    /**
     * <code>double roll = 8;</code>
     * @param value The roll to set.
     */
    private void setRoll(double value) {
      
      roll_ = value;
    }
    /**
     * <code>double roll = 8;</code>
     */
    private void clearRoll() {
      
      roll_ = 0D;
    }

    public static final int YAW_FIELD_NUMBER = 9;
    private double yaw_;
    /**
     * <code>double yaw = 9;</code>
     * @return The yaw.
     */
    @java.lang.Override
    public double getYaw() {
      return yaw_;
    }
    /**
     * <code>double yaw = 9;</code>
     * @param value The yaw to set.
     */
    private void setYaw(double value) {
      
      yaw_ = value;
    }
    /**
     * <code>double yaw = 9;</code>
     */
    private void clearYaw() {
      
      yaw_ = 0D;
    }

    public static final int VELOCITYX_FIELD_NUMBER = 10;
    private float velocityX_;
    /**
     * <pre>
     *飞机在 x，y，z，方向上的当前速度，以米/秒为单位，使用 NED（North-East-Down）坐标系。
     *平台取(velocityX²+velocityY²)开根值作为水平速度
     * </pre>
     *
     * <code>float velocityX = 10;</code>
     * @return The velocityX.
     */
    @java.lang.Override
    public float getVelocityX() {
      return velocityX_;
    }
    /**
     * <pre>
     *飞机在 x，y，z，方向上的当前速度，以米/秒为单位，使用 NED（North-East-Down）坐标系。
     *平台取(velocityX²+velocityY²)开根值作为水平速度
     * </pre>
     *
     * <code>float velocityX = 10;</code>
     * @param value The velocityX to set.
     */
    private void setVelocityX(float value) {
      
      velocityX_ = value;
    }
    /**
     * <pre>
     *飞机在 x，y，z，方向上的当前速度，以米/秒为单位，使用 NED（North-East-Down）坐标系。
     *平台取(velocityX²+velocityY²)开根值作为水平速度
     * </pre>
     *
     * <code>float velocityX = 10;</code>
     */
    private void clearVelocityX() {
      
      velocityX_ = 0F;
    }

    public static final int VELOCITYY_FIELD_NUMBER = 11;
    private float velocityY_;
    /**
     * <code>float velocityY = 11;</code>
     * @return The velocityY.
     */
    @java.lang.Override
    public float getVelocityY() {
      return velocityY_;
    }
    /**
     * <code>float velocityY = 11;</code>
     * @param value The velocityY to set.
     */
    private void setVelocityY(float value) {
      
      velocityY_ = value;
    }
    /**
     * <code>float velocityY = 11;</code>
     */
    private void clearVelocityY() {
      
      velocityY_ = 0F;
    }

    public static final int VELOCITYZ_FIELD_NUMBER = 12;
    private float velocityZ_;
    /**
     * <pre>
     *平台取此值做为垂直速度
     * </pre>
     *
     * <code>float velocityZ = 12;</code>
     * @return The velocityZ.
     */
    @java.lang.Override
    public float getVelocityZ() {
      return velocityZ_;
    }
    /**
     * <pre>
     *平台取此值做为垂直速度
     * </pre>
     *
     * <code>float velocityZ = 12;</code>
     * @param value The velocityZ to set.
     */
    private void setVelocityZ(float value) {
      
      velocityZ_ = value;
    }
    /**
     * <pre>
     *平台取此值做为垂直速度
     * </pre>
     *
     * <code>float velocityZ = 12;</code>
     */
    private void clearVelocityZ() {
      
      velocityZ_ = 0F;
    }

    public static final int FLIGHTTIMEINSECONDS_FIELD_NUMBER = 13;
    private int flightTimeInSeconds_;
    /**
     * <pre>
     *自飞机发动机开启以来的累计飞行时间（以秒为单位）。
     * </pre>
     *
     * <code>int32 flightTimeInSeconds = 13;</code>
     * @return The flightTimeInSeconds.
     */
    @java.lang.Override
    public int getFlightTimeInSeconds() {
      return flightTimeInSeconds_;
    }
    /**
     * <pre>
     *自飞机发动机开启以来的累计飞行时间（以秒为单位）。
     * </pre>
     *
     * <code>int32 flightTimeInSeconds = 13;</code>
     * @param value The flightTimeInSeconds to set.
     */
    private void setFlightTimeInSeconds(int value) {
      
      flightTimeInSeconds_ = value;
    }
    /**
     * <pre>
     *自飞机发动机开启以来的累计飞行时间（以秒为单位）。
     * </pre>
     *
     * <code>int32 flightTimeInSeconds = 13;</code>
     */
    private void clearFlightTimeInSeconds() {
      
      flightTimeInSeconds_ = 0;
    }

    public static final int SATELLITECOUNT_FIELD_NUMBER = 14;
    private int satelliteCount_;
    /**
     * <pre>
     *返回 GPS 卫星计数。
     * </pre>
     *
     * <code>int32 satelliteCount = 14;</code>
     * @return The satelliteCount.
     */
    @java.lang.Override
    public int getSatelliteCount() {
      return satelliteCount_;
    }
    /**
     * <pre>
     *返回 GPS 卫星计数。
     * </pre>
     *
     * <code>int32 satelliteCount = 14;</code>
     * @param value The satelliteCount to set.
     */
    private void setSatelliteCount(int value) {
      
      satelliteCount_ = value;
    }
    /**
     * <pre>
     *返回 GPS 卫星计数。
     * </pre>
     *
     * <code>int32 satelliteCount = 14;</code>
     */
    private void clearSatelliteCount() {
      
      satelliteCount_ = 0;
    }

    public static final int ULTRASONICHEIGHTINMETERS_FIELD_NUMBER = 16;
    private float ultrasonicHeightInMeters_;
    /**
     * <pre>
     *由超声波传感器测量的飞机高度，以米为单位。数据仅在isUltrasonicBeingUsed返回时可用true。高度精度为0.1m。该值在高度低于 5 米时具有参考意义。
     * </pre>
     *
     * <code>float ultrasonicHeightInMeters = 16;</code>
     * @return The ultrasonicHeightInMeters.
     */
    @java.lang.Override
    public float getUltrasonicHeightInMeters() {
      return ultrasonicHeightInMeters_;
    }
    /**
     * <pre>
     *由超声波传感器测量的飞机高度，以米为单位。数据仅在isUltrasonicBeingUsed返回时可用true。高度精度为0.1m。该值在高度低于 5 米时具有参考意义。
     * </pre>
     *
     * <code>float ultrasonicHeightInMeters = 16;</code>
     * @param value The ultrasonicHeightInMeters to set.
     */
    private void setUltrasonicHeightInMeters(float value) {
      
      ultrasonicHeightInMeters_ = value;
    }
    /**
     * <pre>
     *由超声波传感器测量的飞机高度，以米为单位。数据仅在isUltrasonicBeingUsed返回时可用true。高度精度为0.1m。该值在高度低于 5 米时具有参考意义。
     * </pre>
     *
     * <code>float ultrasonicHeightInMeters = 16;</code>
     */
    private void clearUltrasonicHeightInMeters() {
      
      ultrasonicHeightInMeters_ = 0F;
    }

    public static final int FLIGHTCOUNT_FIELD_NUMBER = 20;
    private int flightCount_;
    /**
     * <pre>
     *电池生命周期内的飞行次数。上电时清零。
     * </pre>
     *
     * <code>int32 flightCount = 20;</code>
     * @return The flightCount.
     */
    @java.lang.Override
    public int getFlightCount() {
      return flightCount_;
    }
    /**
     * <pre>
     *电池生命周期内的飞行次数。上电时清零。
     * </pre>
     *
     * <code>int32 flightCount = 20;</code>
     * @param value The flightCount to set.
     */
    private void setFlightCount(int value) {
      
      flightCount_ = value;
    }
    /**
     * <pre>
     *电池生命周期内的飞行次数。上电时清零。
     * </pre>
     *
     * <code>int32 flightCount = 20;</code>
     */
    private void clearFlightCount() {
      
      flightCount_ = 0;
    }

    public static final int HOMELOCATIONLATITUDE_FIELD_NUMBER = 21;
    private double homeLocationLatitude_;
    /**
     * <pre>
     *返航点经纬度
     * </pre>
     *
     * <code>double homeLocationLatitude = 21;</code>
     * @return The homeLocationLatitude.
     */
    @java.lang.Override
    public double getHomeLocationLatitude() {
      return homeLocationLatitude_;
    }
    /**
     * <pre>
     *返航点经纬度
     * </pre>
     *
     * <code>double homeLocationLatitude = 21;</code>
     * @param value The homeLocationLatitude to set.
     */
    private void setHomeLocationLatitude(double value) {
      
      homeLocationLatitude_ = value;
    }
    /**
     * <pre>
     *返航点经纬度
     * </pre>
     *
     * <code>double homeLocationLatitude = 21;</code>
     */
    private void clearHomeLocationLatitude() {
      
      homeLocationLatitude_ = 0D;
    }

    public static final int HOMELOCATIONLONGITUDE_FIELD_NUMBER = 22;
    private double homeLocationLongitude_;
    /**
     * <code>double homeLocationLongitude = 22;</code>
     * @return The homeLocationLongitude.
     */
    @java.lang.Override
    public double getHomeLocationLongitude() {
      return homeLocationLongitude_;
    }
    /**
     * <code>double homeLocationLongitude = 22;</code>
     * @param value The homeLocationLongitude to set.
     */
    private void setHomeLocationLongitude(double value) {
      
      homeLocationLongitude_ = value;
    }
    /**
     * <code>double homeLocationLongitude = 22;</code>
     */
    private void clearHomeLocationLongitude() {
      
      homeLocationLongitude_ = 0D;
    }

    public static final int GOHOMEHEIGHT_FIELD_NUMBER = 23;
    private int goHomeHeight_;
    /**
     * <pre>
     *返航高度
     * </pre>
     *
     * <code>int32 goHomeHeight = 23;</code>
     * @return The goHomeHeight.
     */
    @java.lang.Override
    public int getGoHomeHeight() {
      return goHomeHeight_;
    }
    /**
     * <pre>
     *返航高度
     * </pre>
     *
     * <code>int32 goHomeHeight = 23;</code>
     * @param value The goHomeHeight to set.
     */
    private void setGoHomeHeight(int value) {
      
      goHomeHeight_ = value;
    }
    /**
     * <pre>
     *返航高度
     * </pre>
     *
     * <code>int32 goHomeHeight = 23;</code>
     */
    private void clearGoHomeHeight() {
      
      goHomeHeight_ = 0;
    }

    public static final int FLIGHTMODESTRING_FIELD_NUMBER = 24;
    private java.lang.String flightModeString_;
    /**
     * <pre>
     *飞行器控制模式
     * </pre>
     *
     * <code>string flightModeString = 24;</code>
     * @return The flightModeString.
     */
    @java.lang.Override
    public java.lang.String getFlightModeString() {
      return flightModeString_;
    }
    /**
     * <pre>
     *飞行器控制模式
     * </pre>
     *
     * <code>string flightModeString = 24;</code>
     * @return The bytes for flightModeString.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFlightModeStringBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(flightModeString_);
    }
    /**
     * <pre>
     *飞行器控制模式
     * </pre>
     *
     * <code>string flightModeString = 24;</code>
     * @param value The flightModeString to set.
     */
    private void setFlightModeString(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      flightModeString_ = value;
    }
    /**
     * <pre>
     *飞行器控制模式
     * </pre>
     *
     * <code>string flightModeString = 24;</code>
     */
    private void clearFlightModeString() {
      
      flightModeString_ = getDefaultInstance().getFlightModeString();
    }
    /**
     * <pre>
     *飞行器控制模式
     * </pre>
     *
     * <code>string flightModeString = 24;</code>
     * @param value The bytes for flightModeString to set.
     */
    private void setFlightModeStringBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      flightModeString_ = value.toStringUtf8();
      
    }

    public static final int WINDSPEED_FIELD_NUMBER = 26;
    private int windSpeed_;
    /**
     * <pre>
     *风速(分米)
     * </pre>
     *
     * <code>int32 windSpeed = 26;</code>
     * @return The windSpeed.
     */
    @java.lang.Override
    public int getWindSpeed() {
      return windSpeed_;
    }
    /**
     * <pre>
     *风速(分米)
     * </pre>
     *
     * <code>int32 windSpeed = 26;</code>
     * @param value The windSpeed to set.
     */
    private void setWindSpeed(int value) {
      
      windSpeed_ = value;
    }
    /**
     * <pre>
     *风速(分米)
     * </pre>
     *
     * <code>int32 windSpeed = 26;</code>
     */
    private void clearWindSpeed() {
      
      windSpeed_ = 0;
    }

    public static final int GOHOMELENGTH_FIELD_NUMBER = 27;
    private double goHomeLength_;
    /**
     * <pre>
     *返航距离
     * </pre>
     *
     * <code>double goHomeLength = 27;</code>
     * @return The goHomeLength.
     */
    @java.lang.Override
    public double getGoHomeLength() {
      return goHomeLength_;
    }
    /**
     * <pre>
     *返航距离
     * </pre>
     *
     * <code>double goHomeLength = 27;</code>
     * @param value The goHomeLength to set.
     */
    private void setGoHomeLength(double value) {
      
      goHomeLength_ = value;
    }
    /**
     * <pre>
     *返航距离
     * </pre>
     *
     * <code>double goHomeLength = 27;</code>
     */
    private void clearGoHomeLength() {
      
      goHomeLength_ = 0D;
    }

    public static final int COMPASSHEADING_FIELD_NUMBER = 28;
    private float compassHeading_;
    /**
     * <pre>
     *表示航向，以度为单位。正北为 0 度，正航向为北东，负航向为北西。范围为 [-180, 180]。
     * </pre>
     *
     * <code>float compassHeading = 28;</code>
     * @return The compassHeading.
     */
    @java.lang.Override
    public float getCompassHeading() {
      return compassHeading_;
    }
    /**
     * <pre>
     *表示航向，以度为单位。正北为 0 度，正航向为北东，负航向为北西。范围为 [-180, 180]。
     * </pre>
     *
     * <code>float compassHeading = 28;</code>
     * @param value The compassHeading to set.
     */
    private void setCompassHeading(float value) {
      
      compassHeading_ = value;
    }
    /**
     * <pre>
     *表示航向，以度为单位。正北为 0 度，正航向为北东，负航向为北西。范围为 [-180, 180]。
     * </pre>
     *
     * <code>float compassHeading = 28;</code>
     */
    private void clearCompassHeading() {
      
      compassHeading_ = 0F;
    }

    public static final int ISIMUPREHEATING_FIELD_NUMBER = 29;
    private boolean isIMUPreheating_;
    /**
     * <pre>
     *IMU 正在预热
     * </pre>
     *
     * <code>bool isIMUPreheating = 29;</code>
     * @return The isIMUPreheating.
     */
    @java.lang.Override
    public boolean getIsIMUPreheating() {
      return isIMUPreheating_;
    }
    /**
     * <pre>
     *IMU 正在预热
     * </pre>
     *
     * <code>bool isIMUPreheating = 29;</code>
     * @param value The isIMUPreheating to set.
     */
    private void setIsIMUPreheating(boolean value) {
      
      isIMUPreheating_ = value;
    }
    /**
     * <pre>
     *IMU 正在预热
     * </pre>
     *
     * <code>bool isIMUPreheating = 29;</code>
     */
    private void clearIsIMUPreheating() {
      
      isIMUPreheating_ = false;
    }

    public static final int ISULTRASONICBEINGUSED_FIELD_NUMBER = 30;
    private boolean isUltrasonicBeingUsed_;
    /**
     * <pre>
     *正在使用超声波传感器
     * </pre>
     *
     * <code>bool isUltrasonicBeingUsed = 30;</code>
     * @return The isUltrasonicBeingUsed.
     */
    @java.lang.Override
    public boolean getIsUltrasonicBeingUsed() {
      return isUltrasonicBeingUsed_;
    }
    /**
     * <pre>
     *正在使用超声波传感器
     * </pre>
     *
     * <code>bool isUltrasonicBeingUsed = 30;</code>
     * @param value The isUltrasonicBeingUsed to set.
     */
    private void setIsUltrasonicBeingUsed(boolean value) {
      
      isUltrasonicBeingUsed_ = value;
    }
    /**
     * <pre>
     *正在使用超声波传感器
     * </pre>
     *
     * <code>bool isUltrasonicBeingUsed = 30;</code>
     */
    private void clearIsUltrasonicBeingUsed() {
      
      isUltrasonicBeingUsed_ = false;
    }

    public static final int ISVISIONPOSITIONINGSENSORBEINGUSED_FIELD_NUMBER = 31;
    private boolean isVisionPositioningSensorBeingUsed_;
    /**
     * <pre>
     *正在使用视觉传感器
     * </pre>
     *
     * <code>bool isVisionPositioningSensorBeingUsed = 31;</code>
     * @return The isVisionPositioningSensorBeingUsed.
     */
    @java.lang.Override
    public boolean getIsVisionPositioningSensorBeingUsed() {
      return isVisionPositioningSensorBeingUsed_;
    }
    /**
     * <pre>
     *正在使用视觉传感器
     * </pre>
     *
     * <code>bool isVisionPositioningSensorBeingUsed = 31;</code>
     * @param value The isVisionPositioningSensorBeingUsed to set.
     */
    private void setIsVisionPositioningSensorBeingUsed(boolean value) {
      
      isVisionPositioningSensorBeingUsed_ = value;
    }
    /**
     * <pre>
     *正在使用视觉传感器
     * </pre>
     *
     * <code>bool isVisionPositioningSensorBeingUsed = 31;</code>
     */
    private void clearIsVisionPositioningSensorBeingUsed() {
      
      isVisionPositioningSensorBeingUsed_ = false;
    }

    public static final int ISLOWERTHANBATTERYWARNINGTHRESHOLD_FIELD_NUMBER = 32;
    private boolean isLowerThanBatteryWarningThreshold_;
    /**
     * <pre>
     *电池电量低于低电量警告阈值
     * </pre>
     *
     * <code>bool isLowerThanBatteryWarningThreshold = 32;</code>
     * @return The isLowerThanBatteryWarningThreshold.
     */
    @java.lang.Override
    public boolean getIsLowerThanBatteryWarningThreshold() {
      return isLowerThanBatteryWarningThreshold_;
    }
    /**
     * <pre>
     *电池电量低于低电量警告阈值
     * </pre>
     *
     * <code>bool isLowerThanBatteryWarningThreshold = 32;</code>
     * @param value The isLowerThanBatteryWarningThreshold to set.
     */
    private void setIsLowerThanBatteryWarningThreshold(boolean value) {
      
      isLowerThanBatteryWarningThreshold_ = value;
    }
    /**
     * <pre>
     *电池电量低于低电量警告阈值
     * </pre>
     *
     * <code>bool isLowerThanBatteryWarningThreshold = 32;</code>
     */
    private void clearIsLowerThanBatteryWarningThreshold() {
      
      isLowerThanBatteryWarningThreshold_ = false;
    }

    public static final int ISLOWERTHANSERIOUSBATTERYWARNINGTHRESHOLD_FIELD_NUMBER = 33;
    private boolean isLowerThanSeriousBatteryWarningThreshold_;
    /**
     * <pre>
     *电池电量低于严重低电量警告阈值。
     * </pre>
     *
     * <code>bool isLowerThanSeriousBatteryWarningThreshold = 33;</code>
     * @return The isLowerThanSeriousBatteryWarningThreshold.
     */
    @java.lang.Override
    public boolean getIsLowerThanSeriousBatteryWarningThreshold() {
      return isLowerThanSeriousBatteryWarningThreshold_;
    }
    /**
     * <pre>
     *电池电量低于严重低电量警告阈值。
     * </pre>
     *
     * <code>bool isLowerThanSeriousBatteryWarningThreshold = 33;</code>
     * @param value The isLowerThanSeriousBatteryWarningThreshold to set.
     */
    private void setIsLowerThanSeriousBatteryWarningThreshold(boolean value) {
      
      isLowerThanSeriousBatteryWarningThreshold_ = value;
    }
    /**
     * <pre>
     *电池电量低于严重低电量警告阈值。
     * </pre>
     *
     * <code>bool isLowerThanSeriousBatteryWarningThreshold = 33;</code>
     */
    private void clearIsLowerThanSeriousBatteryWarningThreshold() {
      
      isLowerThanSeriousBatteryWarningThreshold_ = false;
    }

    public static final int SYSTEMSTATUS_FIELD_NUMBER = 34;
    private java.lang.String systemStatus_;
    /**
     * <pre>
     *飞机系统诊断状态(平台可作为飞机状态展示)
     * </pre>
     *
     * <code>string systemStatus = 34;</code>
     * @return The systemStatus.
     */
    @java.lang.Override
    public java.lang.String getSystemStatus() {
      return systemStatus_;
    }
    /**
     * <pre>
     *飞机系统诊断状态(平台可作为飞机状态展示)
     * </pre>
     *
     * <code>string systemStatus = 34;</code>
     * @return The bytes for systemStatus.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSystemStatusBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(systemStatus_);
    }
    /**
     * <pre>
     *飞机系统诊断状态(平台可作为飞机状态展示)
     * </pre>
     *
     * <code>string systemStatus = 34;</code>
     * @param value The systemStatus to set.
     */
    private void setSystemStatus(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      systemStatus_ = value;
    }
    /**
     * <pre>
     *飞机系统诊断状态(平台可作为飞机状态展示)
     * </pre>
     *
     * <code>string systemStatus = 34;</code>
     */
    private void clearSystemStatus() {
      
      systemStatus_ = getDefaultInstance().getSystemStatus();
    }
    /**
     * <pre>
     *飞机系统诊断状态(平台可作为飞机状态展示)
     * </pre>
     *
     * <code>string systemStatus = 34;</code>
     * @param value The bytes for systemStatus to set.
     */
    private void setSystemStatusBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      systemStatus_ = value.toStringUtf8();
      
    }

    public static final int GPSSIGNALLEVEL_FIELD_NUMBER = 15;
    private int gPSsignalLevel_;
    /**
     * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
     * @return The enum numeric value on the wire for gPSsignalLevel.
     */
    @java.lang.Override
    public int getGPSsignalLevelValue() {
      return gPSsignalLevel_;
    }
    /**
     * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
     * @return The gPSsignalLevel.
     */
    @java.lang.Override
    public com.apron.mobilesdk.state.ProtoFlightController.FlightController.GPSSignalLevel getGPSsignalLevel() {
      com.apron.mobilesdk.state.ProtoFlightController.FlightController.GPSSignalLevel result = com.apron.mobilesdk.state.ProtoFlightController.FlightController.GPSSignalLevel.forNumber(gPSsignalLevel_);
      return result == null ? com.apron.mobilesdk.state.ProtoFlightController.FlightController.GPSSignalLevel.UNRECOGNIZED : result;
    }
    /**
     * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
     * @param value The enum numeric value on the wire for gPSsignalLevel to set.
     */
    private void setGPSsignalLevelValue(int value) {
        gPSsignalLevel_ = value;
    }
    /**
     * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
     * @param value The gPSsignalLevel to set.
     */
    private void setGPSsignalLevel(com.apron.mobilesdk.state.ProtoFlightController.FlightController.GPSSignalLevel value) {
      gPSsignalLevel_ = value.getNumber();
      
    }
    /**
     * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
     */
    private void clearGPSsignalLevel() {
      
      gPSsignalLevel_ = 0;
    }

    public static final int ORIENTATIONMODE_FIELD_NUMBER = 17;
    private int orientationMode_;
    /**
     * <code>.FlightController.OrientationMode orientationMode = 17;</code>
     * @return The enum numeric value on the wire for orientationMode.
     */
    @java.lang.Override
    public int getOrientationModeValue() {
      return orientationMode_;
    }
    /**
     * <code>.FlightController.OrientationMode orientationMode = 17;</code>
     * @return The orientationMode.
     */
    @java.lang.Override
    public com.apron.mobilesdk.state.ProtoFlightController.FlightController.OrientationMode getOrientationMode() {
      com.apron.mobilesdk.state.ProtoFlightController.FlightController.OrientationMode result = com.apron.mobilesdk.state.ProtoFlightController.FlightController.OrientationMode.forNumber(orientationMode_);
      return result == null ? com.apron.mobilesdk.state.ProtoFlightController.FlightController.OrientationMode.UNRECOGNIZED : result;
    }
    /**
     * <code>.FlightController.OrientationMode orientationMode = 17;</code>
     * @param value The enum numeric value on the wire for orientationMode to set.
     */
    private void setOrientationModeValue(int value) {
        orientationMode_ = value;
    }
    /**
     * <code>.FlightController.OrientationMode orientationMode = 17;</code>
     * @param value The orientationMode to set.
     */
    private void setOrientationMode(com.apron.mobilesdk.state.ProtoFlightController.FlightController.OrientationMode value) {
      orientationMode_ = value.getNumber();
      
    }
    /**
     * <code>.FlightController.OrientationMode orientationMode = 17;</code>
     */
    private void clearOrientationMode() {
      
      orientationMode_ = 0;
    }

    public static final int FLIGHTWINDWARNING_FIELD_NUMBER = 18;
    private int flightWindWarning_;
    /**
     * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
     * @return The enum numeric value on the wire for flightWindWarning.
     */
    @java.lang.Override
    public int getFlightWindWarningValue() {
      return flightWindWarning_;
    }
    /**
     * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
     * @return The flightWindWarning.
     */
    @java.lang.Override
    public com.apron.mobilesdk.state.ProtoFlightController.FlightController.FlightWindWarning getFlightWindWarning() {
      com.apron.mobilesdk.state.ProtoFlightController.FlightController.FlightWindWarning result = com.apron.mobilesdk.state.ProtoFlightController.FlightController.FlightWindWarning.forNumber(flightWindWarning_);
      return result == null ? com.apron.mobilesdk.state.ProtoFlightController.FlightController.FlightWindWarning.UNRECOGNIZED : result;
    }
    /**
     * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
     * @param value The enum numeric value on the wire for flightWindWarning to set.
     */
    private void setFlightWindWarningValue(int value) {
        flightWindWarning_ = value;
    }
    /**
     * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
     * @param value The flightWindWarning to set.
     */
    private void setFlightWindWarning(com.apron.mobilesdk.state.ProtoFlightController.FlightController.FlightWindWarning value) {
      flightWindWarning_ = value.getNumber();
      
    }
    /**
     * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
     */
    private void clearFlightWindWarning() {
      
      flightWindWarning_ = 0;
    }

    public static final int WINDDIRECTION_FIELD_NUMBER = 25;
    private int windDirection_;
    /**
     * <code>.FlightController.WindDirection windDirection = 25;</code>
     * @return The enum numeric value on the wire for windDirection.
     */
    @java.lang.Override
    public int getWindDirectionValue() {
      return windDirection_;
    }
    /**
     * <code>.FlightController.WindDirection windDirection = 25;</code>
     * @return The windDirection.
     */
    @java.lang.Override
    public com.apron.mobilesdk.state.ProtoFlightController.FlightController.WindDirection getWindDirection() {
      com.apron.mobilesdk.state.ProtoFlightController.FlightController.WindDirection result = com.apron.mobilesdk.state.ProtoFlightController.FlightController.WindDirection.forNumber(windDirection_);
      return result == null ? com.apron.mobilesdk.state.ProtoFlightController.FlightController.WindDirection.UNRECOGNIZED : result;
    }
    /**
     * <code>.FlightController.WindDirection windDirection = 25;</code>
     * @param value The enum numeric value on the wire for windDirection to set.
     */
    private void setWindDirectionValue(int value) {
        windDirection_ = value;
    }
    /**
     * <code>.FlightController.WindDirection windDirection = 25;</code>
     * @param value The windDirection to set.
     */
    private void setWindDirection(com.apron.mobilesdk.state.ProtoFlightController.FlightController.WindDirection value) {
      windDirection_ = value.getNumber();
      
    }
    /**
     * <code>.FlightController.WindDirection windDirection = 25;</code>
     */
    private void clearWindDirection() {
      
      windDirection_ = 0;
    }

    public static final int BATTERYTHRESHOLDBEHAVIOR_FIELD_NUMBER = 19;
    private int batteryThresholdBehavior_;
    /**
     * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
     * @return The enum numeric value on the wire for batteryThresholdBehavior.
     */
    @java.lang.Override
    public int getBatteryThresholdBehaviorValue() {
      return batteryThresholdBehavior_;
    }
    /**
     * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
     * @return The batteryThresholdBehavior.
     */
    @java.lang.Override
    public com.apron.mobilesdk.state.ProtoFlightController.FlightController.BatteryThresholdBehavior getBatteryThresholdBehavior() {
      com.apron.mobilesdk.state.ProtoFlightController.FlightController.BatteryThresholdBehavior result = com.apron.mobilesdk.state.ProtoFlightController.FlightController.BatteryThresholdBehavior.forNumber(batteryThresholdBehavior_);
      return result == null ? com.apron.mobilesdk.state.ProtoFlightController.FlightController.BatteryThresholdBehavior.UNRECOGNIZED : result;
    }
    /**
     * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
     * @param value The enum numeric value on the wire for batteryThresholdBehavior to set.
     */
    private void setBatteryThresholdBehaviorValue(int value) {
        batteryThresholdBehavior_ = value;
    }
    /**
     * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
     * @param value The batteryThresholdBehavior to set.
     */
    private void setBatteryThresholdBehavior(com.apron.mobilesdk.state.ProtoFlightController.FlightController.BatteryThresholdBehavior value) {
      batteryThresholdBehavior_ = value.getNumber();
      
    }
    /**
     * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
     */
    private void clearBatteryThresholdBehavior() {
      
      batteryThresholdBehavior_ = 0;
    }

    public static final int GOHOMEEXECUTIONSTATE_FIELD_NUMBER = 35;
    private int goHomeExecutionState_;
    /**
     * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
     * @return The enum numeric value on the wire for goHomeExecutionState.
     */
    @java.lang.Override
    public int getGoHomeExecutionStateValue() {
      return goHomeExecutionState_;
    }
    /**
     * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
     * @return The goHomeExecutionState.
     */
    @java.lang.Override
    public com.apron.mobilesdk.state.ProtoFlightController.FlightController.GoHomeExecutionState getGoHomeExecutionState() {
      com.apron.mobilesdk.state.ProtoFlightController.FlightController.GoHomeExecutionState result = com.apron.mobilesdk.state.ProtoFlightController.FlightController.GoHomeExecutionState.forNumber(goHomeExecutionState_);
      return result == null ? com.apron.mobilesdk.state.ProtoFlightController.FlightController.GoHomeExecutionState.UNRECOGNIZED : result;
    }
    /**
     * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
     * @param value The enum numeric value on the wire for goHomeExecutionState to set.
     */
    private void setGoHomeExecutionStateValue(int value) {
        goHomeExecutionState_ = value;
    }
    /**
     * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
     * @param value The goHomeExecutionState to set.
     */
    private void setGoHomeExecutionState(com.apron.mobilesdk.state.ProtoFlightController.FlightController.GoHomeExecutionState value) {
      goHomeExecutionState_ = value.getNumber();
      
    }
    /**
     * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
     */
    private void clearGoHomeExecutionState() {
      
      goHomeExecutionState_ = 0;
    }

    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.apron.mobilesdk.state.ProtoFlightController.FlightController prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code FlightController}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.apron.mobilesdk.state.ProtoFlightController.FlightController, Builder> implements
        // @@protoc_insertion_point(builder_implements:FlightController)
        com.apron.mobilesdk.state.ProtoFlightController.FlightControllerOrBuilder {
      // Construct using com.apron.mobilesdk.state.ProtoFlightController.FlightController.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *电机是否启动
       * </pre>
       *
       * <code>bool areMotorsOn = 1;</code>
       * @return The areMotorsOn.
       */
      @java.lang.Override
      public boolean getAreMotorsOn() {
        return instance.getAreMotorsOn();
      }
      /**
       * <pre>
       *电机是否启动
       * </pre>
       *
       * <code>bool areMotorsOn = 1;</code>
       * @param value The areMotorsOn to set.
       * @return This builder for chaining.
       */
      public Builder setAreMotorsOn(boolean value) {
        copyOnWrite();
        instance.setAreMotorsOn(value);
        return this;
      }
      /**
       * <pre>
       *电机是否启动
       * </pre>
       *
       * <code>bool areMotorsOn = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAreMotorsOn() {
        copyOnWrite();
        instance.clearAreMotorsOn();
        return this;
      }

      /**
       * <pre>
       *是否处于飞行状态
       * </pre>
       *
       * <code>bool isFlying = 2;</code>
       * @return The isFlying.
       */
      @java.lang.Override
      public boolean getIsFlying() {
        return instance.getIsFlying();
      }
      /**
       * <pre>
       *是否处于飞行状态
       * </pre>
       *
       * <code>bool isFlying = 2;</code>
       * @param value The isFlying to set.
       * @return This builder for chaining.
       */
      public Builder setIsFlying(boolean value) {
        copyOnWrite();
        instance.setIsFlying(value);
        return this;
      }
      /**
       * <pre>
       *是否处于飞行状态
       * </pre>
       *
       * <code>bool isFlying = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsFlying() {
        copyOnWrite();
        instance.clearIsFlying();
        return this;
      }

      /**
       * <pre>
       *飞行器当前经纬度(WGS84精准坐标系,平台可以转换为GCJ02坐标系使用)
       * </pre>
       *
       * <code>double latitude = 3;</code>
       * @return The latitude.
       */
      @java.lang.Override
      public double getLatitude() {
        return instance.getLatitude();
      }
      /**
       * <pre>
       *飞行器当前经纬度(WGS84精准坐标系,平台可以转换为GCJ02坐标系使用)
       * </pre>
       *
       * <code>double latitude = 3;</code>
       * @param value The latitude to set.
       * @return This builder for chaining.
       */
      public Builder setLatitude(double value) {
        copyOnWrite();
        instance.setLatitude(value);
        return this;
      }
      /**
       * <pre>
       *飞行器当前经纬度(WGS84精准坐标系,平台可以转换为GCJ02坐标系使用)
       * </pre>
       *
       * <code>double latitude = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLatitude() {
        copyOnWrite();
        instance.clearLatitude();
        return this;
      }

      /**
       * <code>double longitude = 4;</code>
       * @return The longitude.
       */
      @java.lang.Override
      public double getLongitude() {
        return instance.getLongitude();
      }
      /**
       * <code>double longitude = 4;</code>
       * @param value The longitude to set.
       * @return This builder for chaining.
       */
      public Builder setLongitude(double value) {
        copyOnWrite();
        instance.setLongitude(value);
        return this;
      }
      /**
       * <code>double longitude = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLongitude() {
        copyOnWrite();
        instance.clearLongitude();
        return this;
      }

      /**
       * <pre>
       *飞行器当前高度
       * </pre>
       *
       * <code>float altitude = 5;</code>
       * @return The altitude.
       */
      @java.lang.Override
      public float getAltitude() {
        return instance.getAltitude();
      }
      /**
       * <pre>
       *飞行器当前高度
       * </pre>
       *
       * <code>float altitude = 5;</code>
       * @param value The altitude to set.
       * @return This builder for chaining.
       */
      public Builder setAltitude(float value) {
        copyOnWrite();
        instance.setAltitude(value);
        return this;
      }
      /**
       * <pre>
       *飞行器当前高度
       * </pre>
       *
       * <code>float altitude = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearAltitude() {
        copyOnWrite();
        instance.clearAltitude();
        return this;
      }

      /**
       * <pre>
       *飞机原地位置相对于海平面的相对高度，以米为单位。
       * </pre>
       *
       * <code>float takeoffLocationAltitude = 6;</code>
       * @return The takeoffLocationAltitude.
       */
      @java.lang.Override
      public float getTakeoffLocationAltitude() {
        return instance.getTakeoffLocationAltitude();
      }
      /**
       * <pre>
       *飞机原地位置相对于海平面的相对高度，以米为单位。
       * </pre>
       *
       * <code>float takeoffLocationAltitude = 6;</code>
       * @param value The takeoffLocationAltitude to set.
       * @return This builder for chaining.
       */
      public Builder setTakeoffLocationAltitude(float value) {
        copyOnWrite();
        instance.setTakeoffLocationAltitude(value);
        return this;
      }
      /**
       * <pre>
       *飞机原地位置相对于海平面的相对高度，以米为单位。
       * </pre>
       *
       * <code>float takeoffLocationAltitude = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearTakeoffLocationAltitude() {
        copyOnWrite();
        instance.clearTakeoffLocationAltitude();
        return this;
      }

      /**
       * <pre>
       *俯仰、横滚和偏航值将在 [-180, 180] 度范围内的飞机姿态。
       * </pre>
       *
       * <code>double pitch = 7;</code>
       * @return The pitch.
       */
      @java.lang.Override
      public double getPitch() {
        return instance.getPitch();
      }
      /**
       * <pre>
       *俯仰、横滚和偏航值将在 [-180, 180] 度范围内的飞机姿态。
       * </pre>
       *
       * <code>double pitch = 7;</code>
       * @param value The pitch to set.
       * @return This builder for chaining.
       */
      public Builder setPitch(double value) {
        copyOnWrite();
        instance.setPitch(value);
        return this;
      }
      /**
       * <pre>
       *俯仰、横滚和偏航值将在 [-180, 180] 度范围内的飞机姿态。
       * </pre>
       *
       * <code>double pitch = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearPitch() {
        copyOnWrite();
        instance.clearPitch();
        return this;
      }

      /**
       * <code>double roll = 8;</code>
       * @return The roll.
       */
      @java.lang.Override
      public double getRoll() {
        return instance.getRoll();
      }
      /**
       * <code>double roll = 8;</code>
       * @param value The roll to set.
       * @return This builder for chaining.
       */
      public Builder setRoll(double value) {
        copyOnWrite();
        instance.setRoll(value);
        return this;
      }
      /**
       * <code>double roll = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearRoll() {
        copyOnWrite();
        instance.clearRoll();
        return this;
      }

      /**
       * <code>double yaw = 9;</code>
       * @return The yaw.
       */
      @java.lang.Override
      public double getYaw() {
        return instance.getYaw();
      }
      /**
       * <code>double yaw = 9;</code>
       * @param value The yaw to set.
       * @return This builder for chaining.
       */
      public Builder setYaw(double value) {
        copyOnWrite();
        instance.setYaw(value);
        return this;
      }
      /**
       * <code>double yaw = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearYaw() {
        copyOnWrite();
        instance.clearYaw();
        return this;
      }

      /**
       * <pre>
       *飞机在 x，y，z，方向上的当前速度，以米/秒为单位，使用 NED（North-East-Down）坐标系。
       *平台取(velocityX²+velocityY²)开根值作为水平速度
       * </pre>
       *
       * <code>float velocityX = 10;</code>
       * @return The velocityX.
       */
      @java.lang.Override
      public float getVelocityX() {
        return instance.getVelocityX();
      }
      /**
       * <pre>
       *飞机在 x，y，z，方向上的当前速度，以米/秒为单位，使用 NED（North-East-Down）坐标系。
       *平台取(velocityX²+velocityY²)开根值作为水平速度
       * </pre>
       *
       * <code>float velocityX = 10;</code>
       * @param value The velocityX to set.
       * @return This builder for chaining.
       */
      public Builder setVelocityX(float value) {
        copyOnWrite();
        instance.setVelocityX(value);
        return this;
      }
      /**
       * <pre>
       *飞机在 x，y，z，方向上的当前速度，以米/秒为单位，使用 NED（North-East-Down）坐标系。
       *平台取(velocityX²+velocityY²)开根值作为水平速度
       * </pre>
       *
       * <code>float velocityX = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearVelocityX() {
        copyOnWrite();
        instance.clearVelocityX();
        return this;
      }

      /**
       * <code>float velocityY = 11;</code>
       * @return The velocityY.
       */
      @java.lang.Override
      public float getVelocityY() {
        return instance.getVelocityY();
      }
      /**
       * <code>float velocityY = 11;</code>
       * @param value The velocityY to set.
       * @return This builder for chaining.
       */
      public Builder setVelocityY(float value) {
        copyOnWrite();
        instance.setVelocityY(value);
        return this;
      }
      /**
       * <code>float velocityY = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearVelocityY() {
        copyOnWrite();
        instance.clearVelocityY();
        return this;
      }

      /**
       * <pre>
       *平台取此值做为垂直速度
       * </pre>
       *
       * <code>float velocityZ = 12;</code>
       * @return The velocityZ.
       */
      @java.lang.Override
      public float getVelocityZ() {
        return instance.getVelocityZ();
      }
      /**
       * <pre>
       *平台取此值做为垂直速度
       * </pre>
       *
       * <code>float velocityZ = 12;</code>
       * @param value The velocityZ to set.
       * @return This builder for chaining.
       */
      public Builder setVelocityZ(float value) {
        copyOnWrite();
        instance.setVelocityZ(value);
        return this;
      }
      /**
       * <pre>
       *平台取此值做为垂直速度
       * </pre>
       *
       * <code>float velocityZ = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearVelocityZ() {
        copyOnWrite();
        instance.clearVelocityZ();
        return this;
      }

      /**
       * <pre>
       *自飞机发动机开启以来的累计飞行时间（以秒为单位）。
       * </pre>
       *
       * <code>int32 flightTimeInSeconds = 13;</code>
       * @return The flightTimeInSeconds.
       */
      @java.lang.Override
      public int getFlightTimeInSeconds() {
        return instance.getFlightTimeInSeconds();
      }
      /**
       * <pre>
       *自飞机发动机开启以来的累计飞行时间（以秒为单位）。
       * </pre>
       *
       * <code>int32 flightTimeInSeconds = 13;</code>
       * @param value The flightTimeInSeconds to set.
       * @return This builder for chaining.
       */
      public Builder setFlightTimeInSeconds(int value) {
        copyOnWrite();
        instance.setFlightTimeInSeconds(value);
        return this;
      }
      /**
       * <pre>
       *自飞机发动机开启以来的累计飞行时间（以秒为单位）。
       * </pre>
       *
       * <code>int32 flightTimeInSeconds = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlightTimeInSeconds() {
        copyOnWrite();
        instance.clearFlightTimeInSeconds();
        return this;
      }

      /**
       * <pre>
       *返回 GPS 卫星计数。
       * </pre>
       *
       * <code>int32 satelliteCount = 14;</code>
       * @return The satelliteCount.
       */
      @java.lang.Override
      public int getSatelliteCount() {
        return instance.getSatelliteCount();
      }
      /**
       * <pre>
       *返回 GPS 卫星计数。
       * </pre>
       *
       * <code>int32 satelliteCount = 14;</code>
       * @param value The satelliteCount to set.
       * @return This builder for chaining.
       */
      public Builder setSatelliteCount(int value) {
        copyOnWrite();
        instance.setSatelliteCount(value);
        return this;
      }
      /**
       * <pre>
       *返回 GPS 卫星计数。
       * </pre>
       *
       * <code>int32 satelliteCount = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearSatelliteCount() {
        copyOnWrite();
        instance.clearSatelliteCount();
        return this;
      }

      /**
       * <pre>
       *由超声波传感器测量的飞机高度，以米为单位。数据仅在isUltrasonicBeingUsed返回时可用true。高度精度为0.1m。该值在高度低于 5 米时具有参考意义。
       * </pre>
       *
       * <code>float ultrasonicHeightInMeters = 16;</code>
       * @return The ultrasonicHeightInMeters.
       */
      @java.lang.Override
      public float getUltrasonicHeightInMeters() {
        return instance.getUltrasonicHeightInMeters();
      }
      /**
       * <pre>
       *由超声波传感器测量的飞机高度，以米为单位。数据仅在isUltrasonicBeingUsed返回时可用true。高度精度为0.1m。该值在高度低于 5 米时具有参考意义。
       * </pre>
       *
       * <code>float ultrasonicHeightInMeters = 16;</code>
       * @param value The ultrasonicHeightInMeters to set.
       * @return This builder for chaining.
       */
      public Builder setUltrasonicHeightInMeters(float value) {
        copyOnWrite();
        instance.setUltrasonicHeightInMeters(value);
        return this;
      }
      /**
       * <pre>
       *由超声波传感器测量的飞机高度，以米为单位。数据仅在isUltrasonicBeingUsed返回时可用true。高度精度为0.1m。该值在高度低于 5 米时具有参考意义。
       * </pre>
       *
       * <code>float ultrasonicHeightInMeters = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearUltrasonicHeightInMeters() {
        copyOnWrite();
        instance.clearUltrasonicHeightInMeters();
        return this;
      }

      /**
       * <pre>
       *电池生命周期内的飞行次数。上电时清零。
       * </pre>
       *
       * <code>int32 flightCount = 20;</code>
       * @return The flightCount.
       */
      @java.lang.Override
      public int getFlightCount() {
        return instance.getFlightCount();
      }
      /**
       * <pre>
       *电池生命周期内的飞行次数。上电时清零。
       * </pre>
       *
       * <code>int32 flightCount = 20;</code>
       * @param value The flightCount to set.
       * @return This builder for chaining.
       */
      public Builder setFlightCount(int value) {
        copyOnWrite();
        instance.setFlightCount(value);
        return this;
      }
      /**
       * <pre>
       *电池生命周期内的飞行次数。上电时清零。
       * </pre>
       *
       * <code>int32 flightCount = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlightCount() {
        copyOnWrite();
        instance.clearFlightCount();
        return this;
      }

      /**
       * <pre>
       *返航点经纬度
       * </pre>
       *
       * <code>double homeLocationLatitude = 21;</code>
       * @return The homeLocationLatitude.
       */
      @java.lang.Override
      public double getHomeLocationLatitude() {
        return instance.getHomeLocationLatitude();
      }
      /**
       * <pre>
       *返航点经纬度
       * </pre>
       *
       * <code>double homeLocationLatitude = 21;</code>
       * @param value The homeLocationLatitude to set.
       * @return This builder for chaining.
       */
      public Builder setHomeLocationLatitude(double value) {
        copyOnWrite();
        instance.setHomeLocationLatitude(value);
        return this;
      }
      /**
       * <pre>
       *返航点经纬度
       * </pre>
       *
       * <code>double homeLocationLatitude = 21;</code>
       * @return This builder for chaining.
       */
      public Builder clearHomeLocationLatitude() {
        copyOnWrite();
        instance.clearHomeLocationLatitude();
        return this;
      }

      /**
       * <code>double homeLocationLongitude = 22;</code>
       * @return The homeLocationLongitude.
       */
      @java.lang.Override
      public double getHomeLocationLongitude() {
        return instance.getHomeLocationLongitude();
      }
      /**
       * <code>double homeLocationLongitude = 22;</code>
       * @param value The homeLocationLongitude to set.
       * @return This builder for chaining.
       */
      public Builder setHomeLocationLongitude(double value) {
        copyOnWrite();
        instance.setHomeLocationLongitude(value);
        return this;
      }
      /**
       * <code>double homeLocationLongitude = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearHomeLocationLongitude() {
        copyOnWrite();
        instance.clearHomeLocationLongitude();
        return this;
      }

      /**
       * <pre>
       *返航高度
       * </pre>
       *
       * <code>int32 goHomeHeight = 23;</code>
       * @return The goHomeHeight.
       */
      @java.lang.Override
      public int getGoHomeHeight() {
        return instance.getGoHomeHeight();
      }
      /**
       * <pre>
       *返航高度
       * </pre>
       *
       * <code>int32 goHomeHeight = 23;</code>
       * @param value The goHomeHeight to set.
       * @return This builder for chaining.
       */
      public Builder setGoHomeHeight(int value) {
        copyOnWrite();
        instance.setGoHomeHeight(value);
        return this;
      }
      /**
       * <pre>
       *返航高度
       * </pre>
       *
       * <code>int32 goHomeHeight = 23;</code>
       * @return This builder for chaining.
       */
      public Builder clearGoHomeHeight() {
        copyOnWrite();
        instance.clearGoHomeHeight();
        return this;
      }

      /**
       * <pre>
       *飞行器控制模式
       * </pre>
       *
       * <code>string flightModeString = 24;</code>
       * @return The flightModeString.
       */
      @java.lang.Override
      public java.lang.String getFlightModeString() {
        return instance.getFlightModeString();
      }
      /**
       * <pre>
       *飞行器控制模式
       * </pre>
       *
       * <code>string flightModeString = 24;</code>
       * @return The bytes for flightModeString.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getFlightModeStringBytes() {
        return instance.getFlightModeStringBytes();
      }
      /**
       * <pre>
       *飞行器控制模式
       * </pre>
       *
       * <code>string flightModeString = 24;</code>
       * @param value The flightModeString to set.
       * @return This builder for chaining.
       */
      public Builder setFlightModeString(
          java.lang.String value) {
        copyOnWrite();
        instance.setFlightModeString(value);
        return this;
      }
      /**
       * <pre>
       *飞行器控制模式
       * </pre>
       *
       * <code>string flightModeString = 24;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlightModeString() {
        copyOnWrite();
        instance.clearFlightModeString();
        return this;
      }
      /**
       * <pre>
       *飞行器控制模式
       * </pre>
       *
       * <code>string flightModeString = 24;</code>
       * @param value The bytes for flightModeString to set.
       * @return This builder for chaining.
       */
      public Builder setFlightModeStringBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFlightModeStringBytes(value);
        return this;
      }

      /**
       * <pre>
       *风速(分米)
       * </pre>
       *
       * <code>int32 windSpeed = 26;</code>
       * @return The windSpeed.
       */
      @java.lang.Override
      public int getWindSpeed() {
        return instance.getWindSpeed();
      }
      /**
       * <pre>
       *风速(分米)
       * </pre>
       *
       * <code>int32 windSpeed = 26;</code>
       * @param value The windSpeed to set.
       * @return This builder for chaining.
       */
      public Builder setWindSpeed(int value) {
        copyOnWrite();
        instance.setWindSpeed(value);
        return this;
      }
      /**
       * <pre>
       *风速(分米)
       * </pre>
       *
       * <code>int32 windSpeed = 26;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindSpeed() {
        copyOnWrite();
        instance.clearWindSpeed();
        return this;
      }

      /**
       * <pre>
       *返航距离
       * </pre>
       *
       * <code>double goHomeLength = 27;</code>
       * @return The goHomeLength.
       */
      @java.lang.Override
      public double getGoHomeLength() {
        return instance.getGoHomeLength();
      }
      /**
       * <pre>
       *返航距离
       * </pre>
       *
       * <code>double goHomeLength = 27;</code>
       * @param value The goHomeLength to set.
       * @return This builder for chaining.
       */
      public Builder setGoHomeLength(double value) {
        copyOnWrite();
        instance.setGoHomeLength(value);
        return this;
      }
      /**
       * <pre>
       *返航距离
       * </pre>
       *
       * <code>double goHomeLength = 27;</code>
       * @return This builder for chaining.
       */
      public Builder clearGoHomeLength() {
        copyOnWrite();
        instance.clearGoHomeLength();
        return this;
      }

      /**
       * <pre>
       *表示航向，以度为单位。正北为 0 度，正航向为北东，负航向为北西。范围为 [-180, 180]。
       * </pre>
       *
       * <code>float compassHeading = 28;</code>
       * @return The compassHeading.
       */
      @java.lang.Override
      public float getCompassHeading() {
        return instance.getCompassHeading();
      }
      /**
       * <pre>
       *表示航向，以度为单位。正北为 0 度，正航向为北东，负航向为北西。范围为 [-180, 180]。
       * </pre>
       *
       * <code>float compassHeading = 28;</code>
       * @param value The compassHeading to set.
       * @return This builder for chaining.
       */
      public Builder setCompassHeading(float value) {
        copyOnWrite();
        instance.setCompassHeading(value);
        return this;
      }
      /**
       * <pre>
       *表示航向，以度为单位。正北为 0 度，正航向为北东，负航向为北西。范围为 [-180, 180]。
       * </pre>
       *
       * <code>float compassHeading = 28;</code>
       * @return This builder for chaining.
       */
      public Builder clearCompassHeading() {
        copyOnWrite();
        instance.clearCompassHeading();
        return this;
      }

      /**
       * <pre>
       *IMU 正在预热
       * </pre>
       *
       * <code>bool isIMUPreheating = 29;</code>
       * @return The isIMUPreheating.
       */
      @java.lang.Override
      public boolean getIsIMUPreheating() {
        return instance.getIsIMUPreheating();
      }
      /**
       * <pre>
       *IMU 正在预热
       * </pre>
       *
       * <code>bool isIMUPreheating = 29;</code>
       * @param value The isIMUPreheating to set.
       * @return This builder for chaining.
       */
      public Builder setIsIMUPreheating(boolean value) {
        copyOnWrite();
        instance.setIsIMUPreheating(value);
        return this;
      }
      /**
       * <pre>
       *IMU 正在预热
       * </pre>
       *
       * <code>bool isIMUPreheating = 29;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsIMUPreheating() {
        copyOnWrite();
        instance.clearIsIMUPreheating();
        return this;
      }

      /**
       * <pre>
       *正在使用超声波传感器
       * </pre>
       *
       * <code>bool isUltrasonicBeingUsed = 30;</code>
       * @return The isUltrasonicBeingUsed.
       */
      @java.lang.Override
      public boolean getIsUltrasonicBeingUsed() {
        return instance.getIsUltrasonicBeingUsed();
      }
      /**
       * <pre>
       *正在使用超声波传感器
       * </pre>
       *
       * <code>bool isUltrasonicBeingUsed = 30;</code>
       * @param value The isUltrasonicBeingUsed to set.
       * @return This builder for chaining.
       */
      public Builder setIsUltrasonicBeingUsed(boolean value) {
        copyOnWrite();
        instance.setIsUltrasonicBeingUsed(value);
        return this;
      }
      /**
       * <pre>
       *正在使用超声波传感器
       * </pre>
       *
       * <code>bool isUltrasonicBeingUsed = 30;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsUltrasonicBeingUsed() {
        copyOnWrite();
        instance.clearIsUltrasonicBeingUsed();
        return this;
      }

      /**
       * <pre>
       *正在使用视觉传感器
       * </pre>
       *
       * <code>bool isVisionPositioningSensorBeingUsed = 31;</code>
       * @return The isVisionPositioningSensorBeingUsed.
       */
      @java.lang.Override
      public boolean getIsVisionPositioningSensorBeingUsed() {
        return instance.getIsVisionPositioningSensorBeingUsed();
      }
      /**
       * <pre>
       *正在使用视觉传感器
       * </pre>
       *
       * <code>bool isVisionPositioningSensorBeingUsed = 31;</code>
       * @param value The isVisionPositioningSensorBeingUsed to set.
       * @return This builder for chaining.
       */
      public Builder setIsVisionPositioningSensorBeingUsed(boolean value) {
        copyOnWrite();
        instance.setIsVisionPositioningSensorBeingUsed(value);
        return this;
      }
      /**
       * <pre>
       *正在使用视觉传感器
       * </pre>
       *
       * <code>bool isVisionPositioningSensorBeingUsed = 31;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsVisionPositioningSensorBeingUsed() {
        copyOnWrite();
        instance.clearIsVisionPositioningSensorBeingUsed();
        return this;
      }

      /**
       * <pre>
       *电池电量低于低电量警告阈值
       * </pre>
       *
       * <code>bool isLowerThanBatteryWarningThreshold = 32;</code>
       * @return The isLowerThanBatteryWarningThreshold.
       */
      @java.lang.Override
      public boolean getIsLowerThanBatteryWarningThreshold() {
        return instance.getIsLowerThanBatteryWarningThreshold();
      }
      /**
       * <pre>
       *电池电量低于低电量警告阈值
       * </pre>
       *
       * <code>bool isLowerThanBatteryWarningThreshold = 32;</code>
       * @param value The isLowerThanBatteryWarningThreshold to set.
       * @return This builder for chaining.
       */
      public Builder setIsLowerThanBatteryWarningThreshold(boolean value) {
        copyOnWrite();
        instance.setIsLowerThanBatteryWarningThreshold(value);
        return this;
      }
      /**
       * <pre>
       *电池电量低于低电量警告阈值
       * </pre>
       *
       * <code>bool isLowerThanBatteryWarningThreshold = 32;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsLowerThanBatteryWarningThreshold() {
        copyOnWrite();
        instance.clearIsLowerThanBatteryWarningThreshold();
        return this;
      }

      /**
       * <pre>
       *电池电量低于严重低电量警告阈值。
       * </pre>
       *
       * <code>bool isLowerThanSeriousBatteryWarningThreshold = 33;</code>
       * @return The isLowerThanSeriousBatteryWarningThreshold.
       */
      @java.lang.Override
      public boolean getIsLowerThanSeriousBatteryWarningThreshold() {
        return instance.getIsLowerThanSeriousBatteryWarningThreshold();
      }
      /**
       * <pre>
       *电池电量低于严重低电量警告阈值。
       * </pre>
       *
       * <code>bool isLowerThanSeriousBatteryWarningThreshold = 33;</code>
       * @param value The isLowerThanSeriousBatteryWarningThreshold to set.
       * @return This builder for chaining.
       */
      public Builder setIsLowerThanSeriousBatteryWarningThreshold(boolean value) {
        copyOnWrite();
        instance.setIsLowerThanSeriousBatteryWarningThreshold(value);
        return this;
      }
      /**
       * <pre>
       *电池电量低于严重低电量警告阈值。
       * </pre>
       *
       * <code>bool isLowerThanSeriousBatteryWarningThreshold = 33;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsLowerThanSeriousBatteryWarningThreshold() {
        copyOnWrite();
        instance.clearIsLowerThanSeriousBatteryWarningThreshold();
        return this;
      }

      /**
       * <pre>
       *飞机系统诊断状态(平台可作为飞机状态展示)
       * </pre>
       *
       * <code>string systemStatus = 34;</code>
       * @return The systemStatus.
       */
      @java.lang.Override
      public java.lang.String getSystemStatus() {
        return instance.getSystemStatus();
      }
      /**
       * <pre>
       *飞机系统诊断状态(平台可作为飞机状态展示)
       * </pre>
       *
       * <code>string systemStatus = 34;</code>
       * @return The bytes for systemStatus.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getSystemStatusBytes() {
        return instance.getSystemStatusBytes();
      }
      /**
       * <pre>
       *飞机系统诊断状态(平台可作为飞机状态展示)
       * </pre>
       *
       * <code>string systemStatus = 34;</code>
       * @param value The systemStatus to set.
       * @return This builder for chaining.
       */
      public Builder setSystemStatus(
          java.lang.String value) {
        copyOnWrite();
        instance.setSystemStatus(value);
        return this;
      }
      /**
       * <pre>
       *飞机系统诊断状态(平台可作为飞机状态展示)
       * </pre>
       *
       * <code>string systemStatus = 34;</code>
       * @return This builder for chaining.
       */
      public Builder clearSystemStatus() {
        copyOnWrite();
        instance.clearSystemStatus();
        return this;
      }
      /**
       * <pre>
       *飞机系统诊断状态(平台可作为飞机状态展示)
       * </pre>
       *
       * <code>string systemStatus = 34;</code>
       * @param value The bytes for systemStatus to set.
       * @return This builder for chaining.
       */
      public Builder setSystemStatusBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSystemStatusBytes(value);
        return this;
      }

      /**
       * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
       * @return The enum numeric value on the wire for gPSsignalLevel.
       */
      @java.lang.Override
      public int getGPSsignalLevelValue() {
        return instance.getGPSsignalLevelValue();
      }
      /**
       * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
       * @param value The gPSsignalLevel to set.
       * @return This builder for chaining.
       */
      public Builder setGPSsignalLevelValue(int value) {
        copyOnWrite();
        instance.setGPSsignalLevelValue(value);
        return this;
      }
      /**
       * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
       * @return The gPSsignalLevel.
       */
      @java.lang.Override
      public com.apron.mobilesdk.state.ProtoFlightController.FlightController.GPSSignalLevel getGPSsignalLevel() {
        return instance.getGPSsignalLevel();
      }
      /**
       * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
       * @param value The enum numeric value on the wire for gPSsignalLevel to set.
       * @return This builder for chaining.
       */
      public Builder setGPSsignalLevel(com.apron.mobilesdk.state.ProtoFlightController.FlightController.GPSSignalLevel value) {
        copyOnWrite();
        instance.setGPSsignalLevel(value);
        return this;
      }
      /**
       * <code>.FlightController.GPSSignalLevel GPSsignalLevel = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearGPSsignalLevel() {
        copyOnWrite();
        instance.clearGPSsignalLevel();
        return this;
      }

      /**
       * <code>.FlightController.OrientationMode orientationMode = 17;</code>
       * @return The enum numeric value on the wire for orientationMode.
       */
      @java.lang.Override
      public int getOrientationModeValue() {
        return instance.getOrientationModeValue();
      }
      /**
       * <code>.FlightController.OrientationMode orientationMode = 17;</code>
       * @param value The orientationMode to set.
       * @return This builder for chaining.
       */
      public Builder setOrientationModeValue(int value) {
        copyOnWrite();
        instance.setOrientationModeValue(value);
        return this;
      }
      /**
       * <code>.FlightController.OrientationMode orientationMode = 17;</code>
       * @return The orientationMode.
       */
      @java.lang.Override
      public com.apron.mobilesdk.state.ProtoFlightController.FlightController.OrientationMode getOrientationMode() {
        return instance.getOrientationMode();
      }
      /**
       * <code>.FlightController.OrientationMode orientationMode = 17;</code>
       * @param value The enum numeric value on the wire for orientationMode to set.
       * @return This builder for chaining.
       */
      public Builder setOrientationMode(com.apron.mobilesdk.state.ProtoFlightController.FlightController.OrientationMode value) {
        copyOnWrite();
        instance.setOrientationMode(value);
        return this;
      }
      /**
       * <code>.FlightController.OrientationMode orientationMode = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearOrientationMode() {
        copyOnWrite();
        instance.clearOrientationMode();
        return this;
      }

      /**
       * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
       * @return The enum numeric value on the wire for flightWindWarning.
       */
      @java.lang.Override
      public int getFlightWindWarningValue() {
        return instance.getFlightWindWarningValue();
      }
      /**
       * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
       * @param value The flightWindWarning to set.
       * @return This builder for chaining.
       */
      public Builder setFlightWindWarningValue(int value) {
        copyOnWrite();
        instance.setFlightWindWarningValue(value);
        return this;
      }
      /**
       * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
       * @return The flightWindWarning.
       */
      @java.lang.Override
      public com.apron.mobilesdk.state.ProtoFlightController.FlightController.FlightWindWarning getFlightWindWarning() {
        return instance.getFlightWindWarning();
      }
      /**
       * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
       * @param value The enum numeric value on the wire for flightWindWarning to set.
       * @return This builder for chaining.
       */
      public Builder setFlightWindWarning(com.apron.mobilesdk.state.ProtoFlightController.FlightController.FlightWindWarning value) {
        copyOnWrite();
        instance.setFlightWindWarning(value);
        return this;
      }
      /**
       * <code>.FlightController.FlightWindWarning flightWindWarning = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlightWindWarning() {
        copyOnWrite();
        instance.clearFlightWindWarning();
        return this;
      }

      /**
       * <code>.FlightController.WindDirection windDirection = 25;</code>
       * @return The enum numeric value on the wire for windDirection.
       */
      @java.lang.Override
      public int getWindDirectionValue() {
        return instance.getWindDirectionValue();
      }
      /**
       * <code>.FlightController.WindDirection windDirection = 25;</code>
       * @param value The windDirection to set.
       * @return This builder for chaining.
       */
      public Builder setWindDirectionValue(int value) {
        copyOnWrite();
        instance.setWindDirectionValue(value);
        return this;
      }
      /**
       * <code>.FlightController.WindDirection windDirection = 25;</code>
       * @return The windDirection.
       */
      @java.lang.Override
      public com.apron.mobilesdk.state.ProtoFlightController.FlightController.WindDirection getWindDirection() {
        return instance.getWindDirection();
      }
      /**
       * <code>.FlightController.WindDirection windDirection = 25;</code>
       * @param value The enum numeric value on the wire for windDirection to set.
       * @return This builder for chaining.
       */
      public Builder setWindDirection(com.apron.mobilesdk.state.ProtoFlightController.FlightController.WindDirection value) {
        copyOnWrite();
        instance.setWindDirection(value);
        return this;
      }
      /**
       * <code>.FlightController.WindDirection windDirection = 25;</code>
       * @return This builder for chaining.
       */
      public Builder clearWindDirection() {
        copyOnWrite();
        instance.clearWindDirection();
        return this;
      }

      /**
       * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
       * @return The enum numeric value on the wire for batteryThresholdBehavior.
       */
      @java.lang.Override
      public int getBatteryThresholdBehaviorValue() {
        return instance.getBatteryThresholdBehaviorValue();
      }
      /**
       * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
       * @param value The batteryThresholdBehavior to set.
       * @return This builder for chaining.
       */
      public Builder setBatteryThresholdBehaviorValue(int value) {
        copyOnWrite();
        instance.setBatteryThresholdBehaviorValue(value);
        return this;
      }
      /**
       * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
       * @return The batteryThresholdBehavior.
       */
      @java.lang.Override
      public com.apron.mobilesdk.state.ProtoFlightController.FlightController.BatteryThresholdBehavior getBatteryThresholdBehavior() {
        return instance.getBatteryThresholdBehavior();
      }
      /**
       * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
       * @param value The enum numeric value on the wire for batteryThresholdBehavior to set.
       * @return This builder for chaining.
       */
      public Builder setBatteryThresholdBehavior(com.apron.mobilesdk.state.ProtoFlightController.FlightController.BatteryThresholdBehavior value) {
        copyOnWrite();
        instance.setBatteryThresholdBehavior(value);
        return this;
      }
      /**
       * <code>.FlightController.BatteryThresholdBehavior batteryThresholdBehavior = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearBatteryThresholdBehavior() {
        copyOnWrite();
        instance.clearBatteryThresholdBehavior();
        return this;
      }

      /**
       * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
       * @return The enum numeric value on the wire for goHomeExecutionState.
       */
      @java.lang.Override
      public int getGoHomeExecutionStateValue() {
        return instance.getGoHomeExecutionStateValue();
      }
      /**
       * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
       * @param value The goHomeExecutionState to set.
       * @return This builder for chaining.
       */
      public Builder setGoHomeExecutionStateValue(int value) {
        copyOnWrite();
        instance.setGoHomeExecutionStateValue(value);
        return this;
      }
      /**
       * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
       * @return The goHomeExecutionState.
       */
      @java.lang.Override
      public com.apron.mobilesdk.state.ProtoFlightController.FlightController.GoHomeExecutionState getGoHomeExecutionState() {
        return instance.getGoHomeExecutionState();
      }
      /**
       * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
       * @param value The enum numeric value on the wire for goHomeExecutionState to set.
       * @return This builder for chaining.
       */
      public Builder setGoHomeExecutionState(com.apron.mobilesdk.state.ProtoFlightController.FlightController.GoHomeExecutionState value) {
        copyOnWrite();
        instance.setGoHomeExecutionState(value);
        return this;
      }
      /**
       * <code>.FlightController.GoHomeExecutionState goHomeExecutionState = 35;</code>
       * @return This builder for chaining.
       */
      public Builder clearGoHomeExecutionState() {
        copyOnWrite();
        instance.clearGoHomeExecutionState();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:FlightController)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.apron.mobilesdk.state.ProtoFlightController.FlightController();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "areMotorsOn_",
              "isFlying_",
              "latitude_",
              "longitude_",
              "altitude_",
              "takeoffLocationAltitude_",
              "pitch_",
              "roll_",
              "yaw_",
              "velocityX_",
              "velocityY_",
              "velocityZ_",
              "flightTimeInSeconds_",
              "satelliteCount_",
              "gPSsignalLevel_",
              "ultrasonicHeightInMeters_",
              "orientationMode_",
              "flightWindWarning_",
              "batteryThresholdBehavior_",
              "flightCount_",
              "homeLocationLatitude_",
              "homeLocationLongitude_",
              "goHomeHeight_",
              "flightModeString_",
              "windDirection_",
              "windSpeed_",
              "goHomeLength_",
              "compassHeading_",
              "isIMUPreheating_",
              "isUltrasonicBeingUsed_",
              "isVisionPositioningSensorBeingUsed_",
              "isLowerThanBatteryWarningThreshold_",
              "isLowerThanSeriousBatteryWarningThreshold_",
              "systemStatus_",
              "goHomeExecutionState_",
            };
            java.lang.String info =
                "\u0000#\u0000\u0000\u0001##\u0000\u0000\u0000\u0001\u0007\u0002\u0007\u0003\u0000" +
                "\u0004\u0000\u0005\u0001\u0006\u0001\u0007\u0000\b\u0000\t\u0000\n\u0001\u000b\u0001" +
                "\f\u0001\r\u0004\u000e\u0004\u000f\f\u0010\u0001\u0011\f\u0012\f\u0013\f\u0014\u0004" +
                "\u0015\u0000\u0016\u0000\u0017\u0004\u0018\u0208\u0019\f\u001a\u0004\u001b\u0000" +
                "\u001c\u0001\u001d\u0007\u001e\u0007\u001f\u0007 \u0007!\u0007\"\u0208#\f";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.apron.mobilesdk.state.ProtoFlightController.FlightController> parser = PARSER;
          if (parser == null) {
            synchronized (com.apron.mobilesdk.state.ProtoFlightController.FlightController.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.apron.mobilesdk.state.ProtoFlightController.FlightController>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:FlightController)
    private static final com.apron.mobilesdk.state.ProtoFlightController.FlightController DEFAULT_INSTANCE;
    static {
      FlightController defaultInstance = new FlightController();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        FlightController.class, defaultInstance);
    }

    public static com.apron.mobilesdk.state.ProtoFlightController.FlightController getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<FlightController> PARSER;

    public static com.google.protobuf.Parser<FlightController> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
