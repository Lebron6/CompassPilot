// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RTKState.proto

package com.apron.mobilesdk.state;

public final class ProtoRTKState {
  private ProtoRTKState() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface RTKStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:RTKState)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *当 isRTKBeingUsed 为 true 时，飞控将使用 RTK 数据。
     *(平台可使用此参数确认当前RTK是否正在使用)
     * </pre>
     *
     * <code>bool isRTKBeingUsed = 1;</code>
     * @return The isRTKBeingUsed.
     */
    boolean getIsRTKBeingUsed();

    /**
     * <pre>
     *Gps 或 RTK 卫星计数。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>int32 satelliteCount = 2;</code>
     * @return The satelliteCount.
     */
    int getSatelliteCount();

    /**
     * <pre>
     *起飞高度。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>float takeOffAltitude = 3;</code>
     * @return The takeOffAltitude.
     */
    float getTakeOffAltitude();

    /**
     * <pre>
     *返航距离。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>float distanceToHomePoint = 4;</code>
     * @return The distanceToHomePoint.
     */
    float getDistanceToHomePoint();

    /**
     * <pre>
     *椭球体高度。从 GPS 读取的绝对海拔高度。仅 Matrice 300 RTK 支持。
     * </pre>
     *
     * <code>float ellipsoidHeight = 5;</code>
     * @return The ellipsoidHeight.
     */
    float getEllipsoidHeight();

    /**
     * <pre>
     *飞机高度。飞机的绝对海拔高度。当 RTK 使用且有效时，该值将是融合 RTK 高度。否则，它是一个融合气压计高度。
     * 由 Matrice 300 RTK、Phantom 4 RTK 和 P4 Multispectral 支持。
     * </pre>
     *
     * <code>float aircraftAltitude = 6;</code>
     * @return The aircraftAltitude.
     */
    float getAircraftAltitude();

    /**
     * <pre>
     *基站海拔高度，以米为单位。
     * </pre>
     *
     * <code>float bsAltitude = 8;</code>
     * @return The bsAltitude.
     */
    float getBsAltitude();

    /**
     * <pre>
     *相对于真北的航向，由移动台上从天线 2 到天线 1 形成的矢量定义。单位是度。
     * </pre>
     *
     * <code>float heading = 9;</code>
     * @return The heading.
     */
    float getHeading();

    /**
     * <pre>
     *如果true表示航向值有效。未获得卫星定位时，航向无效。
     * </pre>
     *
     * <code>bool isHeadingValid = 7;</code>
     * @return The isHeadingValid.
     */
    boolean getIsHeadingValid();

    /**
     * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
     * @return The enum numeric value on the wire for positioningSolution.
     */
    int getPositioningSolutionValue();
    /**
     * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
     * @return The positioningSolution.
     */
    com.apron.mobilesdk.state.ProtoRTKState.RTKState.PositioningSolution getPositioningSolution();
  }
  /**
   * Protobuf type {@code RTKState}
   */
  public  static final class RTKState extends
      com.google.protobuf.GeneratedMessageLite<
          RTKState, RTKState.Builder> implements
      // @@protoc_insertion_point(message_implements:RTKState)
      RTKStateOrBuilder {
    private RTKState() {
    }
    /**
     * <pre>
     *这个枚举定义了当前使用的定位解决方案。
     * </pre>
     *
     * Protobuf enum {@code RTKState.PositioningSolution}
     */
    public enum PositioningSolution
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>NONE = 0;</code>
       */
      NONE(0),
      /**
       * <code>SINGLE_POINT = 16;</code>
       */
      SINGLE_POINT(16),
      /**
       * <code>FLOAT = 34;</code>
       */
      FLOAT(34),
      /**
       * <code>FIXED_POINT = 50;</code>
       */
      FIXED_POINT(50),
      /**
       * <code>UNKNOWN = 51;</code>
       */
      UNKNOWN(51),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>SINGLE_POINT = 16;</code>
       */
      public static final int SINGLE_POINT_VALUE = 16;
      /**
       * <code>FLOAT = 34;</code>
       */
      public static final int FLOAT_VALUE = 34;
      /**
       * <code>FIXED_POINT = 50;</code>
       */
      public static final int FIXED_POINT_VALUE = 50;
      /**
       * <code>UNKNOWN = 51;</code>
       */
      public static final int UNKNOWN_VALUE = 51;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static PositioningSolution valueOf(int value) {
        return forNumber(value);
      }

      public static PositioningSolution forNumber(int value) {
        switch (value) {
          case 0: return NONE;
          case 16: return SINGLE_POINT;
          case 34: return FLOAT;
          case 50: return FIXED_POINT;
          case 51: return UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PositioningSolution>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          PositioningSolution> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PositioningSolution>() {
              @java.lang.Override
              public PositioningSolution findValueByNumber(int number) {
                return PositioningSolution.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return PositioningSolutionVerifier.INSTANCE;
      }

      private static final class PositioningSolutionVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new PositioningSolutionVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return PositioningSolution.forNumber(number) != null;
              }
            };

      private final int value;

      private PositioningSolution(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:RTKState.PositioningSolution)
    }

    public static final int ISRTKBEINGUSED_FIELD_NUMBER = 1;
    private boolean isRTKBeingUsed_;
    /**
     * <pre>
     *当 isRTKBeingUsed 为 true 时，飞控将使用 RTK 数据。
     *(平台可使用此参数确认当前RTK是否正在使用)
     * </pre>
     *
     * <code>bool isRTKBeingUsed = 1;</code>
     * @return The isRTKBeingUsed.
     */
    @java.lang.Override
    public boolean getIsRTKBeingUsed() {
      return isRTKBeingUsed_;
    }
    /**
     * <pre>
     *当 isRTKBeingUsed 为 true 时，飞控将使用 RTK 数据。
     *(平台可使用此参数确认当前RTK是否正在使用)
     * </pre>
     *
     * <code>bool isRTKBeingUsed = 1;</code>
     * @param value The isRTKBeingUsed to set.
     */
    private void setIsRTKBeingUsed(boolean value) {
      
      isRTKBeingUsed_ = value;
    }
    /**
     * <pre>
     *当 isRTKBeingUsed 为 true 时，飞控将使用 RTK 数据。
     *(平台可使用此参数确认当前RTK是否正在使用)
     * </pre>
     *
     * <code>bool isRTKBeingUsed = 1;</code>
     */
    private void clearIsRTKBeingUsed() {
      
      isRTKBeingUsed_ = false;
    }

    public static final int SATELLITECOUNT_FIELD_NUMBER = 2;
    private int satelliteCount_;
    /**
     * <pre>
     *Gps 或 RTK 卫星计数。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>int32 satelliteCount = 2;</code>
     * @return The satelliteCount.
     */
    @java.lang.Override
    public int getSatelliteCount() {
      return satelliteCount_;
    }
    /**
     * <pre>
     *Gps 或 RTK 卫星计数。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>int32 satelliteCount = 2;</code>
     * @param value The satelliteCount to set.
     */
    private void setSatelliteCount(int value) {
      
      satelliteCount_ = value;
    }
    /**
     * <pre>
     *Gps 或 RTK 卫星计数。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>int32 satelliteCount = 2;</code>
     */
    private void clearSatelliteCount() {
      
      satelliteCount_ = 0;
    }

    public static final int TAKEOFFALTITUDE_FIELD_NUMBER = 3;
    private float takeOffAltitude_;
    /**
     * <pre>
     *起飞高度。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>float takeOffAltitude = 3;</code>
     * @return The takeOffAltitude.
     */
    @java.lang.Override
    public float getTakeOffAltitude() {
      return takeOffAltitude_;
    }
    /**
     * <pre>
     *起飞高度。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>float takeOffAltitude = 3;</code>
     * @param value The takeOffAltitude to set.
     */
    private void setTakeOffAltitude(float value) {
      
      takeOffAltitude_ = value;
    }
    /**
     * <pre>
     *起飞高度。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>float takeOffAltitude = 3;</code>
     */
    private void clearTakeOffAltitude() {
      
      takeOffAltitude_ = 0F;
    }

    public static final int DISTANCETOHOMEPOINT_FIELD_NUMBER = 4;
    private float distanceToHomePoint_;
    /**
     * <pre>
     *返航距离。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>float distanceToHomePoint = 4;</code>
     * @return The distanceToHomePoint.
     */
    @java.lang.Override
    public float getDistanceToHomePoint() {
      return distanceToHomePoint_;
    }
    /**
     * <pre>
     *返航距离。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>float distanceToHomePoint = 4;</code>
     * @param value The distanceToHomePoint to set.
     */
    private void setDistanceToHomePoint(float value) {
      
      distanceToHomePoint_ = value;
    }
    /**
     * <pre>
     *返航距离。仅 Phantom 4 RTK 支持。
     * </pre>
     *
     * <code>float distanceToHomePoint = 4;</code>
     */
    private void clearDistanceToHomePoint() {
      
      distanceToHomePoint_ = 0F;
    }

    public static final int ELLIPSOIDHEIGHT_FIELD_NUMBER = 5;
    private float ellipsoidHeight_;
    /**
     * <pre>
     *椭球体高度。从 GPS 读取的绝对海拔高度。仅 Matrice 300 RTK 支持。
     * </pre>
     *
     * <code>float ellipsoidHeight = 5;</code>
     * @return The ellipsoidHeight.
     */
    @java.lang.Override
    public float getEllipsoidHeight() {
      return ellipsoidHeight_;
    }
    /**
     * <pre>
     *椭球体高度。从 GPS 读取的绝对海拔高度。仅 Matrice 300 RTK 支持。
     * </pre>
     *
     * <code>float ellipsoidHeight = 5;</code>
     * @param value The ellipsoidHeight to set.
     */
    private void setEllipsoidHeight(float value) {
      
      ellipsoidHeight_ = value;
    }
    /**
     * <pre>
     *椭球体高度。从 GPS 读取的绝对海拔高度。仅 Matrice 300 RTK 支持。
     * </pre>
     *
     * <code>float ellipsoidHeight = 5;</code>
     */
    private void clearEllipsoidHeight() {
      
      ellipsoidHeight_ = 0F;
    }

    public static final int AIRCRAFTALTITUDE_FIELD_NUMBER = 6;
    private float aircraftAltitude_;
    /**
     * <pre>
     *飞机高度。飞机的绝对海拔高度。当 RTK 使用且有效时，该值将是融合 RTK 高度。否则，它是一个融合气压计高度。
     * 由 Matrice 300 RTK、Phantom 4 RTK 和 P4 Multispectral 支持。
     * </pre>
     *
     * <code>float aircraftAltitude = 6;</code>
     * @return The aircraftAltitude.
     */
    @java.lang.Override
    public float getAircraftAltitude() {
      return aircraftAltitude_;
    }
    /**
     * <pre>
     *飞机高度。飞机的绝对海拔高度。当 RTK 使用且有效时，该值将是融合 RTK 高度。否则，它是一个融合气压计高度。
     * 由 Matrice 300 RTK、Phantom 4 RTK 和 P4 Multispectral 支持。
     * </pre>
     *
     * <code>float aircraftAltitude = 6;</code>
     * @param value The aircraftAltitude to set.
     */
    private void setAircraftAltitude(float value) {
      
      aircraftAltitude_ = value;
    }
    /**
     * <pre>
     *飞机高度。飞机的绝对海拔高度。当 RTK 使用且有效时，该值将是融合 RTK 高度。否则，它是一个融合气压计高度。
     * 由 Matrice 300 RTK、Phantom 4 RTK 和 P4 Multispectral 支持。
     * </pre>
     *
     * <code>float aircraftAltitude = 6;</code>
     */
    private void clearAircraftAltitude() {
      
      aircraftAltitude_ = 0F;
    }

    public static final int BSALTITUDE_FIELD_NUMBER = 8;
    private float bsAltitude_;
    /**
     * <pre>
     *基站海拔高度，以米为单位。
     * </pre>
     *
     * <code>float bsAltitude = 8;</code>
     * @return The bsAltitude.
     */
    @java.lang.Override
    public float getBsAltitude() {
      return bsAltitude_;
    }
    /**
     * <pre>
     *基站海拔高度，以米为单位。
     * </pre>
     *
     * <code>float bsAltitude = 8;</code>
     * @param value The bsAltitude to set.
     */
    private void setBsAltitude(float value) {
      
      bsAltitude_ = value;
    }
    /**
     * <pre>
     *基站海拔高度，以米为单位。
     * </pre>
     *
     * <code>float bsAltitude = 8;</code>
     */
    private void clearBsAltitude() {
      
      bsAltitude_ = 0F;
    }

    public static final int HEADING_FIELD_NUMBER = 9;
    private float heading_;
    /**
     * <pre>
     *相对于真北的航向，由移动台上从天线 2 到天线 1 形成的矢量定义。单位是度。
     * </pre>
     *
     * <code>float heading = 9;</code>
     * @return The heading.
     */
    @java.lang.Override
    public float getHeading() {
      return heading_;
    }
    /**
     * <pre>
     *相对于真北的航向，由移动台上从天线 2 到天线 1 形成的矢量定义。单位是度。
     * </pre>
     *
     * <code>float heading = 9;</code>
     * @param value The heading to set.
     */
    private void setHeading(float value) {
      
      heading_ = value;
    }
    /**
     * <pre>
     *相对于真北的航向，由移动台上从天线 2 到天线 1 形成的矢量定义。单位是度。
     * </pre>
     *
     * <code>float heading = 9;</code>
     */
    private void clearHeading() {
      
      heading_ = 0F;
    }

    public static final int ISHEADINGVALID_FIELD_NUMBER = 7;
    private boolean isHeadingValid_;
    /**
     * <pre>
     *如果true表示航向值有效。未获得卫星定位时，航向无效。
     * </pre>
     *
     * <code>bool isHeadingValid = 7;</code>
     * @return The isHeadingValid.
     */
    @java.lang.Override
    public boolean getIsHeadingValid() {
      return isHeadingValid_;
    }
    /**
     * <pre>
     *如果true表示航向值有效。未获得卫星定位时，航向无效。
     * </pre>
     *
     * <code>bool isHeadingValid = 7;</code>
     * @param value The isHeadingValid to set.
     */
    private void setIsHeadingValid(boolean value) {
      
      isHeadingValid_ = value;
    }
    /**
     * <pre>
     *如果true表示航向值有效。未获得卫星定位时，航向无效。
     * </pre>
     *
     * <code>bool isHeadingValid = 7;</code>
     */
    private void clearIsHeadingValid() {
      
      isHeadingValid_ = false;
    }

    public static final int POSITIONINGSOLUTION_FIELD_NUMBER = 15;
    private int positioningSolution_;
    /**
     * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
     * @return The enum numeric value on the wire for positioningSolution.
     */
    @java.lang.Override
    public int getPositioningSolutionValue() {
      return positioningSolution_;
    }
    /**
     * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
     * @return The positioningSolution.
     */
    @java.lang.Override
    public com.apron.mobilesdk.state.ProtoRTKState.RTKState.PositioningSolution getPositioningSolution() {
      com.apron.mobilesdk.state.ProtoRTKState.RTKState.PositioningSolution result = com.apron.mobilesdk.state.ProtoRTKState.RTKState.PositioningSolution.forNumber(positioningSolution_);
      return result == null ? com.apron.mobilesdk.state.ProtoRTKState.RTKState.PositioningSolution.UNRECOGNIZED : result;
    }
    /**
     * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
     * @param value The enum numeric value on the wire for positioningSolution to set.
     */
    private void setPositioningSolutionValue(int value) {
        positioningSolution_ = value;
    }
    /**
     * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
     * @param value The positioningSolution to set.
     */
    private void setPositioningSolution(com.apron.mobilesdk.state.ProtoRTKState.RTKState.PositioningSolution value) {
      positioningSolution_ = value.getNumber();
      
    }
    /**
     * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
     */
    private void clearPositioningSolution() {
      
      positioningSolution_ = 0;
    }

    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.apron.mobilesdk.state.ProtoRTKState.RTKState prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * Protobuf type {@code RTKState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.apron.mobilesdk.state.ProtoRTKState.RTKState, Builder> implements
        // @@protoc_insertion_point(builder_implements:RTKState)
        com.apron.mobilesdk.state.ProtoRTKState.RTKStateOrBuilder {
      // Construct using com.apron.mobilesdk.state.ProtoRTKState.RTKState.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *当 isRTKBeingUsed 为 true 时，飞控将使用 RTK 数据。
       *(平台可使用此参数确认当前RTK是否正在使用)
       * </pre>
       *
       * <code>bool isRTKBeingUsed = 1;</code>
       * @return The isRTKBeingUsed.
       */
      @java.lang.Override
      public boolean getIsRTKBeingUsed() {
        return instance.getIsRTKBeingUsed();
      }
      /**
       * <pre>
       *当 isRTKBeingUsed 为 true 时，飞控将使用 RTK 数据。
       *(平台可使用此参数确认当前RTK是否正在使用)
       * </pre>
       *
       * <code>bool isRTKBeingUsed = 1;</code>
       * @param value The isRTKBeingUsed to set.
       * @return This builder for chaining.
       */
      public Builder setIsRTKBeingUsed(boolean value) {
        copyOnWrite();
        instance.setIsRTKBeingUsed(value);
        return this;
      }
      /**
       * <pre>
       *当 isRTKBeingUsed 为 true 时，飞控将使用 RTK 数据。
       *(平台可使用此参数确认当前RTK是否正在使用)
       * </pre>
       *
       * <code>bool isRTKBeingUsed = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsRTKBeingUsed() {
        copyOnWrite();
        instance.clearIsRTKBeingUsed();
        return this;
      }

      /**
       * <pre>
       *Gps 或 RTK 卫星计数。仅 Phantom 4 RTK 支持。
       * </pre>
       *
       * <code>int32 satelliteCount = 2;</code>
       * @return The satelliteCount.
       */
      @java.lang.Override
      public int getSatelliteCount() {
        return instance.getSatelliteCount();
      }
      /**
       * <pre>
       *Gps 或 RTK 卫星计数。仅 Phantom 4 RTK 支持。
       * </pre>
       *
       * <code>int32 satelliteCount = 2;</code>
       * @param value The satelliteCount to set.
       * @return This builder for chaining.
       */
      public Builder setSatelliteCount(int value) {
        copyOnWrite();
        instance.setSatelliteCount(value);
        return this;
      }
      /**
       * <pre>
       *Gps 或 RTK 卫星计数。仅 Phantom 4 RTK 支持。
       * </pre>
       *
       * <code>int32 satelliteCount = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSatelliteCount() {
        copyOnWrite();
        instance.clearSatelliteCount();
        return this;
      }

      /**
       * <pre>
       *起飞高度。仅 Phantom 4 RTK 支持。
       * </pre>
       *
       * <code>float takeOffAltitude = 3;</code>
       * @return The takeOffAltitude.
       */
      @java.lang.Override
      public float getTakeOffAltitude() {
        return instance.getTakeOffAltitude();
      }
      /**
       * <pre>
       *起飞高度。仅 Phantom 4 RTK 支持。
       * </pre>
       *
       * <code>float takeOffAltitude = 3;</code>
       * @param value The takeOffAltitude to set.
       * @return This builder for chaining.
       */
      public Builder setTakeOffAltitude(float value) {
        copyOnWrite();
        instance.setTakeOffAltitude(value);
        return this;
      }
      /**
       * <pre>
       *起飞高度。仅 Phantom 4 RTK 支持。
       * </pre>
       *
       * <code>float takeOffAltitude = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTakeOffAltitude() {
        copyOnWrite();
        instance.clearTakeOffAltitude();
        return this;
      }

      /**
       * <pre>
       *返航距离。仅 Phantom 4 RTK 支持。
       * </pre>
       *
       * <code>float distanceToHomePoint = 4;</code>
       * @return The distanceToHomePoint.
       */
      @java.lang.Override
      public float getDistanceToHomePoint() {
        return instance.getDistanceToHomePoint();
      }
      /**
       * <pre>
       *返航距离。仅 Phantom 4 RTK 支持。
       * </pre>
       *
       * <code>float distanceToHomePoint = 4;</code>
       * @param value The distanceToHomePoint to set.
       * @return This builder for chaining.
       */
      public Builder setDistanceToHomePoint(float value) {
        copyOnWrite();
        instance.setDistanceToHomePoint(value);
        return this;
      }
      /**
       * <pre>
       *返航距离。仅 Phantom 4 RTK 支持。
       * </pre>
       *
       * <code>float distanceToHomePoint = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearDistanceToHomePoint() {
        copyOnWrite();
        instance.clearDistanceToHomePoint();
        return this;
      }

      /**
       * <pre>
       *椭球体高度。从 GPS 读取的绝对海拔高度。仅 Matrice 300 RTK 支持。
       * </pre>
       *
       * <code>float ellipsoidHeight = 5;</code>
       * @return The ellipsoidHeight.
       */
      @java.lang.Override
      public float getEllipsoidHeight() {
        return instance.getEllipsoidHeight();
      }
      /**
       * <pre>
       *椭球体高度。从 GPS 读取的绝对海拔高度。仅 Matrice 300 RTK 支持。
       * </pre>
       *
       * <code>float ellipsoidHeight = 5;</code>
       * @param value The ellipsoidHeight to set.
       * @return This builder for chaining.
       */
      public Builder setEllipsoidHeight(float value) {
        copyOnWrite();
        instance.setEllipsoidHeight(value);
        return this;
      }
      /**
       * <pre>
       *椭球体高度。从 GPS 读取的绝对海拔高度。仅 Matrice 300 RTK 支持。
       * </pre>
       *
       * <code>float ellipsoidHeight = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearEllipsoidHeight() {
        copyOnWrite();
        instance.clearEllipsoidHeight();
        return this;
      }

      /**
       * <pre>
       *飞机高度。飞机的绝对海拔高度。当 RTK 使用且有效时，该值将是融合 RTK 高度。否则，它是一个融合气压计高度。
       * 由 Matrice 300 RTK、Phantom 4 RTK 和 P4 Multispectral 支持。
       * </pre>
       *
       * <code>float aircraftAltitude = 6;</code>
       * @return The aircraftAltitude.
       */
      @java.lang.Override
      public float getAircraftAltitude() {
        return instance.getAircraftAltitude();
      }
      /**
       * <pre>
       *飞机高度。飞机的绝对海拔高度。当 RTK 使用且有效时，该值将是融合 RTK 高度。否则，它是一个融合气压计高度。
       * 由 Matrice 300 RTK、Phantom 4 RTK 和 P4 Multispectral 支持。
       * </pre>
       *
       * <code>float aircraftAltitude = 6;</code>
       * @param value The aircraftAltitude to set.
       * @return This builder for chaining.
       */
      public Builder setAircraftAltitude(float value) {
        copyOnWrite();
        instance.setAircraftAltitude(value);
        return this;
      }
      /**
       * <pre>
       *飞机高度。飞机的绝对海拔高度。当 RTK 使用且有效时，该值将是融合 RTK 高度。否则，它是一个融合气压计高度。
       * 由 Matrice 300 RTK、Phantom 4 RTK 和 P4 Multispectral 支持。
       * </pre>
       *
       * <code>float aircraftAltitude = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearAircraftAltitude() {
        copyOnWrite();
        instance.clearAircraftAltitude();
        return this;
      }

      /**
       * <pre>
       *基站海拔高度，以米为单位。
       * </pre>
       *
       * <code>float bsAltitude = 8;</code>
       * @return The bsAltitude.
       */
      @java.lang.Override
      public float getBsAltitude() {
        return instance.getBsAltitude();
      }
      /**
       * <pre>
       *基站海拔高度，以米为单位。
       * </pre>
       *
       * <code>float bsAltitude = 8;</code>
       * @param value The bsAltitude to set.
       * @return This builder for chaining.
       */
      public Builder setBsAltitude(float value) {
        copyOnWrite();
        instance.setBsAltitude(value);
        return this;
      }
      /**
       * <pre>
       *基站海拔高度，以米为单位。
       * </pre>
       *
       * <code>float bsAltitude = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearBsAltitude() {
        copyOnWrite();
        instance.clearBsAltitude();
        return this;
      }

      /**
       * <pre>
       *相对于真北的航向，由移动台上从天线 2 到天线 1 形成的矢量定义。单位是度。
       * </pre>
       *
       * <code>float heading = 9;</code>
       * @return The heading.
       */
      @java.lang.Override
      public float getHeading() {
        return instance.getHeading();
      }
      /**
       * <pre>
       *相对于真北的航向，由移动台上从天线 2 到天线 1 形成的矢量定义。单位是度。
       * </pre>
       *
       * <code>float heading = 9;</code>
       * @param value The heading to set.
       * @return This builder for chaining.
       */
      public Builder setHeading(float value) {
        copyOnWrite();
        instance.setHeading(value);
        return this;
      }
      /**
       * <pre>
       *相对于真北的航向，由移动台上从天线 2 到天线 1 形成的矢量定义。单位是度。
       * </pre>
       *
       * <code>float heading = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeading() {
        copyOnWrite();
        instance.clearHeading();
        return this;
      }

      /**
       * <pre>
       *如果true表示航向值有效。未获得卫星定位时，航向无效。
       * </pre>
       *
       * <code>bool isHeadingValid = 7;</code>
       * @return The isHeadingValid.
       */
      @java.lang.Override
      public boolean getIsHeadingValid() {
        return instance.getIsHeadingValid();
      }
      /**
       * <pre>
       *如果true表示航向值有效。未获得卫星定位时，航向无效。
       * </pre>
       *
       * <code>bool isHeadingValid = 7;</code>
       * @param value The isHeadingValid to set.
       * @return This builder for chaining.
       */
      public Builder setIsHeadingValid(boolean value) {
        copyOnWrite();
        instance.setIsHeadingValid(value);
        return this;
      }
      /**
       * <pre>
       *如果true表示航向值有效。未获得卫星定位时，航向无效。
       * </pre>
       *
       * <code>bool isHeadingValid = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsHeadingValid() {
        copyOnWrite();
        instance.clearIsHeadingValid();
        return this;
      }

      /**
       * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
       * @return The enum numeric value on the wire for positioningSolution.
       */
      @java.lang.Override
      public int getPositioningSolutionValue() {
        return instance.getPositioningSolutionValue();
      }
      /**
       * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
       * @param value The positioningSolution to set.
       * @return This builder for chaining.
       */
      public Builder setPositioningSolutionValue(int value) {
        copyOnWrite();
        instance.setPositioningSolutionValue(value);
        return this;
      }
      /**
       * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
       * @return The positioningSolution.
       */
      @java.lang.Override
      public com.apron.mobilesdk.state.ProtoRTKState.RTKState.PositioningSolution getPositioningSolution() {
        return instance.getPositioningSolution();
      }
      /**
       * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
       * @param value The enum numeric value on the wire for positioningSolution to set.
       * @return This builder for chaining.
       */
      public Builder setPositioningSolution(com.apron.mobilesdk.state.ProtoRTKState.RTKState.PositioningSolution value) {
        copyOnWrite();
        instance.setPositioningSolution(value);
        return this;
      }
      /**
       * <code>.RTKState.PositioningSolution positioningSolution = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearPositioningSolution() {
        copyOnWrite();
        instance.clearPositioningSolution();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:RTKState)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.apron.mobilesdk.state.ProtoRTKState.RTKState();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "isRTKBeingUsed_",
              "satelliteCount_",
              "takeOffAltitude_",
              "distanceToHomePoint_",
              "ellipsoidHeight_",
              "aircraftAltitude_",
              "isHeadingValid_",
              "bsAltitude_",
              "heading_",
              "positioningSolution_",
            };
            java.lang.String info =
                "\u0000\n\u0000\u0000\u0001\u000f\n\u0000\u0000\u0000\u0001\u0007\u0002\u0004\u0003" +
                "\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0007\b\u0001\t\u0001\u000f\f";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.apron.mobilesdk.state.ProtoRTKState.RTKState> parser = PARSER;
          if (parser == null) {
            synchronized (com.apron.mobilesdk.state.ProtoRTKState.RTKState.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.apron.mobilesdk.state.ProtoRTKState.RTKState>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:RTKState)
    private static final com.apron.mobilesdk.state.ProtoRTKState.RTKState DEFAULT_INSTANCE;
    static {
      RTKState defaultInstance = new RTKState();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        RTKState.class, defaultInstance);
    }

    public static com.apron.mobilesdk.state.ProtoRTKState.RTKState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<RTKState> PARSER;

    public static com.google.protobuf.Parser<RTKState> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
